									第三章	字符串、向量和数组
内容
--------------------
	3.1	命名空间的using声明
	3.2	标准库类型string
	3.3	标准库类型vector
	3.4	迭代器介绍
	3.5	数组
	3.6	多维数组

3.1	命名空间的using声明
	到目前为止，我们用到的函数库基本上都属于命名空间std。而程序也是显示的将这一点标示了出来。
例如，std::cin表示从标准输入中读取内容。此处使用作用域操作符（：：）的含义是：编译器应该从
操作符左侧的名字所示的作用域中寻找右侧那个名字。（也就好比是从命名空间中调用cin这个函数一样）
	上面的写法显得比较繁琐，然而幸运的是，通过更简单的途径也可以使用到命名空间中的成员。本
节学习其中一种最安全的方法，也就是使用using声明(using declaration）。有了using声明就无须
专门的前缀（形如命名空间::）也能使用所需的名字了。using声明具有如下的形式：
				using namespace::name
一旦声明了上述语句，就可以直接访问命名空间中的名字：
				using std::cin;//这样就可以使用std空间中的cin函数了。


每个名字都需要独立的using声明
	按照规定，每个using声明引入命名空间中的一个成员。例如，可以把要用到的标准库中的名字都以using
声明引入命名空间中的一个成员。
		using std::endl;using std::cout;//等等

头文件不应该包含using声明
	位于头文件的代码，一般来说不应该使用using声明。这是因为头文件的内容会拷贝到所有引用它的文件中
去，如果头文件里有某个using声明，那么每个使用了该头文件的文件就都会有这个声明，对于某些程序来说，由
于不经意间包含了一些名字，反而可能产生始料未及的名字冲突。（所以这里尽量别使用using namespce::name)

3.2	标准库类型string（定义在std空间）
	标准库类型string表示 可变长 的 字符序列 ，使用string类型必须首先包含string头文件。作为标准库
库的一部分，string定义在命名空间std中。接下来的示例都假定包含了下述代码
			#include <string>   //包含string头文件
			using std::string;	//使用std空间中的string
C++标准一方面对库类型所提供的操作做了详细规定，另一方面也对库的实现者做出了一些性能上的需求。因此，标准
库类型对于一般应用场合来说有足够的效率。
3.2.1	定义和初始化string 对象
	如何初始化类的对象是由类的本身决定的。一个类可以定义很多种初始化对象的方式，只不过这些方式之间必须有
所区别：或者是初始值的数量不同，或者是初始值的类型不同。表3-1列出了初始化string对象最常用的一些方式：
				表3.1	初始化string对象的方式
		string s1					默认初始化，s1是一个空字符串
		string s2(s1)				s2是s1的副本//注意，其实这是一个类的对象而已，也就是构造对象
									的时候用的是构造函数，所以得用()来传入参数
		string s2 = s1;				等价于s2(s1)，s2是s1的副本
		string s3("value")			s3是字面值"value"的副本，s3是字面值"value"的副本
		string s3 = "value"			等价于s3("value")，s3是字面值"value"的副本
		string s4(n,'c')			把s4初始化为由连续n个字符c组成的串
例如：
		string s1;					//默认初始化，s1是一个空字符
		string s2=s1;				//s2是s1的副本
		string s3="hiya";			//s3是该字符串字面值的副本
		string s4(10,'c');			//s4是内容是cccccccccc
		
直接初始化和拷贝初始化
	C++语言有几种不同的初始化方式，通过string我们可以清楚地看到在这些初始化方式之间到底有什么区别和联系。
如果使用等号（=）初始化一个变量，实际上执行的是拷贝初始化（copy initialization），编译器把等号右侧的初
始值拷贝到新创建的对象中去。与之相反，如果不使用等号，则执行的是直接初始化（direct initiaonlization）
	当初始值只有一个时，使用直接初始化或拷贝初始化都行；如果像上面的s4那样初始化要用到多种值，一般来说只能
使用直接初始化（例外有可能是：使用{}来进行初始化，注意{}初始化的时候，如果精度丢失的话，就会造成错误）。
					string s5 = "hiya";//拷贝初始化
					string s6("hiya");//直接初始化
					string s7(10,'c');//直接初始化，这个表示，s7是由10个c组成的字符串
对于用多个值进行初始化的情况，非要用拷贝初始化的方式来处理也不是不可以，不过需要显示的创建一个（临时）对象
用于拷贝。
					string s8 = string(10,'c');//拷贝初始化，其实就是建立一个对象然后赋值给新的对象
s8的初始值是string(10,'c')，它实际上是用数字10和字符c两个参数创建出来的一个string对象，然后这个string对
象又拷贝给了s8（等于号的意思不就是拷贝的意思嘛，所以就叫做拷贝初始化）。

3.2.2	string对象上的操作
	一个类除了要规定初始化其对象的方式，还要定义对象上所能执行的操作。其中，类既能定义通过函数调用的操作，就像
Sales_item类的isbn函数那样，也能定义<<.+等各种运算符在该类对象上新的含义。表3.2列举了string的大多数操作
						表3.2		string的操作
			os<<s						将s写到输出流os当中，并返回os
			is>>s						从is中读取字符串赋给s，字符串以空白分割，返回is
			getline(is,s)				从is中读取一行赋给s，并返回is
			s.empty()					s为空返回true，否则返回false
			s.size()					返回s中字符的个数
			s[n]						返回s中第n个字符的 引用 ，位置n从0开始
			s1+s2						返回s1和s2连接后的结果
			s1=s2						用s2的副本代替s1中原来的字符
			s1==s2						如果s1和s2中所含的字符完全一样，则它们相等；string对象的想等性
										对大小写字母敏感
			s1!=s2						等性判断对字母的大小写敏感
			<,<=,>,>=					利用字符在字典中的顺序进行比较，且对字母的大小写敏感

读写string对象
	第一章中曾经介绍过，使用标准库中的iostream来读写int、double等内置类型的值。同样，也可以使用IO操作符读写
string对象。
			#include <string>
			using namespace std;
			int main()
			{
				string s;
				cin >> s;
				cout<<s<<endl;
				return 0;
			}
string对象会自动忽略开头的空白（即空格符、换行符、制表符等）并从第一个真正的字符开始读起，直到遇到下一处空白为止。
和内置类型的输入和输出操作一样，string对象的此类操作也是返回运算符 左侧的运算 对象 作为其结果。因此多个输入或者
多个输出可以连写在一起。
			string s1,s2;
			cin>>s1>>s2;
			cout<<s1<<s2<<endl;
读取未知变量的string对象
			int main()
			{
				string word;
				while(cin >> word)
					cout<< word<<endl;
				return 0;
			}
在该程序中，读取的对象是string而非int，但是while语句的条件部分和之前版本的程序是一样的。该条件负责在读取时检测流
的情况，如果流有效，也就是说没有遇到文件结束标记或非法输入，那么执行while语句的内部操作。此时，循环体将输出刚刚从标
准读取的内容。重复若干次之后，一旦遇到文件结束标记或非法输入循环也就结束了。

使用getline读取一整行
	有时我们希望能在最终得到的字符串中保留输入时的空白字符。这时应该使用getline函数代替原来的>>运算符。getline
函数的参数是一个输入流和一个string对象，函数从给定的输入流中读入内容，直到遇到换行符为止（注意换行符也被读取进来了）
然后把所读取的内容存放到那个string对象中去（注意不存在换行符）。getline函数一遇到换行符就结束读取操作并返回结果，
哪怕输入的一开始就是换行符也是如此。如果输入真的一开始就是换行符，那么所得的结果就是个空的string。		
但是注意：
		getline的返回是basic_istream,也就是说即使是空的string，返回的结果也是basic_istream类型的东西，所以
你要是用其作为判断条件的话，就注意了。任何输入的返回都是1，所以使用
			while(getline(cin,line))
				cout<<line;
这样的话，会跳不出while循环的！

string的empty和size操作
	顾名思义，empty函数根据string对象是否为空返回一个对应的布尔值。和Sales_item类的isbn成员一样，empty也是
string对象的一个成员函数。调用该函数的方法就是普通对象调用成员函数一样。使用的是点操作符。
		while(getline(cin,line))
		{
			if(!line.empty())
				cout<<line;
		}
这样就可以通过判断输入的数据是否为空，从而可以进行相应的判断，然后就可以跳出while循环。
	size函数返回string对象的长度（即string对象中字符的个数），可以使用size函数只输出长度超过80个字符的行：
			string line;
			while(getline(cin,line))
			{
				if(line.size()>80)
					cout<<line;
			}

string::size_type类型
	对于size函数来说，返回一个int或者如前面所述的那样返回一个unsigned似乎都是合情合理的。但是其实size函数返回的是
一个string::size_type类型的值。
注意：其实这个类型就是string类的一个成员变量。
	string类及其它大多数标准库类型都定义了几种配套的类型。这些配套类型体现了标准库类型与机器无关的特性，类型size_type
即是其中一种。在具体使用的时候，通过作用域操作符来表明名字size_type是在类string中定义的。尽管我们不太清楚
string::size_type类型的细节。但是有一点可以肯定的是：它是一个无符号类型的值，而且能够足够存放下任何string对象的大小。
所有用于存放string类的size函数返回值的变量，都应该是string::size_type类型的！！
	过去，string::size_type这种类型有点神秘，不太容易理解和使用。在C++11新标准中，允许编译器通过auto或者decltype
来推断变量的类型：
				auto len = line.size();//auto是靠右边的值的类型来自动推断类型的，所以这个len的类型就是size_type
注意：
	由于size函数返回的是一个无符号整型数，因此切记，如果在表达式中混用了带符号数和无符号数将可能产生意想不到的结果。例如
，假设n是一个具有负值的int，则表达式s.size()<n的判断结果几乎肯定是true。这是因为负值n会自动转换成一个比较大的无符号值！
所以一定要注意这个无符号和有符号混在一块，有符号的会自动转换成无符号的值！！

比较string对象
	string类定义了几种用于比较字符串的运算符。这些比较运算符逐一比较string对象中的字符，并且对大小写敏感，也就是说，在比较
时同一个字母的大写形式和小写形式是不同的。
	相等性运算符（==和!=）分别检验两个string对象相等或不相等，string对象相等意味着他们的长度相同而且所包含的字符也全相同。
关系运算符<、<=、>、>=分别检验一个string对象是否小于，小于等于，大于，大于等于。上述这些运算符都依照（大小写敏感的）字典顺序：
		>>>>如果两个string对象的长度不同，而且较短string对象的每个字符都与较长string对象对应位置上的字符相同，就说较短
string对象小于较长string对象。
		>>>>如果两个string对象在某些对应位置上不一致，则string对象比较的结果其实就是string对象中第一对相异字符比较的结果

为string对象赋值
	一般来说，在设计标准库类型时都力求在易用上向内置类型看齐，因此  大多数库类型都支持赋值操作！！  对于string类而言，允许
把一个对象赋值给另外一个对象：
		string st1(10,'c'),str2;
		st1 = str2;//st1变成一个空字符串了
两个string对象相加：
	两个string对象相加得到一个新的string对象，其内容是把左侧的运算对象与右侧的运算对象串接而成。也就是说，对string对象使用
加法运算符（+）的结果是一个新的string对象，它所包含的字符由两个部分组成，前半部分由第一个string对象组成，第二部分由第二个
string对象组成。也具有+=操作符。

字面值和string对象相加
	因为标准库允许把字符字面值和字符串字面值转换成string对象，所以在需要string对象的地方就可以使用这两种字面值来替代。利用
这一点将之前的程序改写成如下形式：
			string s1 = "hello",s2 = "world";
			string s3 = s1 + "," + s2 + '\n';//
当把string对象和字符字面值及字符串字面值混在一条语句中使用时，必须确保每个加法运算符（+）的两侧的运算对象至少有一个是string
对象：
			string s4 = s1 + ", ";
			string s5 = "hello" + ", ";//错误：两个运算对象都不是string
我个人的理解：
	因为+操作符在这里其实就是string类的一个重载运算符。所以如果你两边没有string对象，那么其实就是用的就是系统内置的+运算符，
肯定是报错的。但是如果要是有一个就是类string的重载操作符了。所以就可以使用了！！
			string s6 = s1 + ", " + "world";//正确
			string s7 = "hello" + ", " + s2;//错误：不能把字面值直接相加
其中s6中，子表达式 s1 + ", "的结果是一个string对象，同时作为第二个加法运算符的左侧运算对象，因此上述语句和下面的和语句是等
价的：
			string tmp = s1 + ", ";
			s6 = tmp + "world";

	另一个关键问题是要知道能改变某个字符的特性。在cctype头文件中定义了一组标准库函数处理这部分工作。表3.3列出了主要函数名及
其意义
						表3.3：cctype头文件中的函数
		isalnum(c)					当c是字母或数字时为真
		isalpha(c)					当c是字母是为真
		iscntrl(c)					当c是控制字符时为真
		isdigit(c)					当c是数字时为真
		isgraph(c)					当c不是空格但可以打印时为真
		islower(c)					当c是小写字母时为真
		isprint(c)					当c是可打印字符时为真（即c是空格或c具有可视形式）
		ispunct(c)					当c是标点符号时为真（即c不是控制字符、数字、字母、可打印空白中的一种）
		isspace(c)					当c是空白时为真（即c是空格、横向制表符、纵向制表符、回车符、换行符、进纸符中的一种）
		isupper(c)					当c是是大写字母的时候为真
		isxdigit(c)					当c是十六进制数字时为真
		tolower(c)					如果c是大写字母，输出对应的小写字母；否则原样输出c
		toupper(c)					如果c是小写字母，输出对应的大写字母；否则原样输出c
		
建议：使用C++版本的C标准库头文件
	C++标准库中除了定义C++语言特有的功能外，也兼容了C语言的标准库。C语言的头文件形如name.h，C++则将这些文件命为cname。也就是
去掉了.h后缀！！！！而在name之前加了一个c字母，这里的c表示这是一个属于C语言标准库的头文件。
	因此cctype头文件和ctype.h头文件的内容是一样的，只不过从命名规范上来来讲更符合C++语言的要求。特别的，在名为cname的头文件中
定义的名字从属于命名空间std，而定义在名为.h的头文件中则不然！！！
	一般来说，C++程序应该使用名为cname的头文件，而不是使用name.h的形式，标准库中的名字总能在命名空间std中找到。如果使用.h形式
的头文件，程序员不得不时刻牢记哪些是从C语言那继承过来的，哪些又是C++语言所独有的！

处理每个字符？使用基于范围for语句
	如果想对string对象中的每个字符做点什么操作，目前最好的办法就是使用C++11新标准提供的一种语句：范围for语句。这种语句遍历给定序
列中的每个元素并对序列中的每个值执行某种操作，其语法形式是：
							for (declaration : expression)
								statement
其中，expression部分是一个对象，用于表示一个 序列 。declaration部分负责定义一个变量，该 变量 将被用于访问 序列 中的 基础元素 。
每次迭代，declaration部分的 变量会 被初始化为expression部分的 下一个元素。
	一个string对象表示一个字符的序列，因此string对象可以作为范围for语句中的expression部分。举一个简单的例子，我们可以使用for
语句把string对象中的字符每行一个输出出来：
							string str("some string");
							for (auto c : str)
								cout<< c << endl;
for循环把变量c和str联系了起来，其中我们定义循环控制变量的方式与定义任意一个普通变量是一样的。此例中，通过使用auto关键字让编译器来
决定变量c的类型，这里c的类型是char（之所以是char，是因为根据后面expression中的序列的单个的元素是什么类型，推断出来的）。每次迭代，
str的下一个字符被拷贝给c，因此该循环可以读作：对于字符串str中的每个字符c“，执行某某操作。此例中的”某某操作“即输出一个字符，然后换行。
	举个稍微复杂一点的例子，使用for语句和ispunct函数来统计string对象中标点符号的个数：
							string s("hello world!!!");
							//punct_cnt的类型和s.size的返回类型一样，
							decltype(s.size()) punct_cnt = 0;
							//统计s中标点符号的数量
							for(auto c : s)
							{
								if(ispunct(c))
									++punct_cnt;
							}
							cout<<punct_cnt
								<<" punctuation characters in " << s << endl;
程序的输出结果是：
							3 punctuation characters in hello world!!!

使用范围for语句改变字符串中的字符
	如果想要改变string对象中字符的值，必须把循环变量定义成引用类型。记住，所谓引用只是给定对象的一个别名，因此当使用引用作为循环控制变量
时，这个变量实际上被依次绑定到了序列的每一个元素上。使用这个引用，我们就能改变它绑定的字符。例如下边这个改变string对象中的小写字母为大写
字母：
							string s("Hello world!!!");
							for (auto &c : s)
								c = toupper(c)
							cout<<s<<endl;
每次迭代时，变量c引用string对象s的下一个字符，赋给c也就是在改变s中对应字符的值。因此当执行下面的语句时：
							c = toupper(c);//c是一个引用，因此赋值语句将改变s中字符的值
实际上改变了c绑定的字符的值。

只处理一部分字符？
	要想访问string对象中的单个字符有两种形式：一种是使用下标；另外一种是使用迭代器。
下标运算符（[]）接受的输入参数是string::size_type类型的值，这个参数表示要访问的字符的位置；返回值是该位置上字符的引用。string对象
的下标从0记起。如果string对象s至少包含两个字符，则s[0]表示的是第一个字符，s[1]是第二个字符，s[s.size()-1]是最后一个字符。
下标的值称作”下标“或”索引“，如果索引是带符号类型的值将自动转换成由string::size_type表达的无符号类型。
							if(!s.empty())//这一步很重要，这个习惯得有！因为string对象使用索引的时候，不能越界，
										 //所以必须得先判断是不是string对象是不是存在，如果不存在，那么s[0]就是越界了
										 //所以必须得判断！
								cout<<s[0]<<endl;
使用下标执行迭代
	另一个例子是把s的第一个词改写成大写形式：
							for(decltype(s.size()) index = 0;
								index != s.size() && !isspcae(s[index]);
								index ++)
								s[index] = toupper(s[index]));
index的类型是由decltype来决定的（注意，decltype是通过表达式来决定类型的，而auto是根据等号右侧的表达式来决定的类型的）

3.3	标准库类型vector
	标准库类型vector表示对象的集合，其中所有对象的类型都相同，集合中的每个对象都有一个与之对应的索引。索引用于访问对象。因为
vector”容纳着“其他对象，所以它也常被称作容器（container）。要想使用vector，必须得包含适当的头文件，在后续的例子中，都将
假定做了如下using声明：
							#include <vector>
							using std::vector;
C++语言既有类模板（class template），也由函数模板，其中vector是一个类模板。只有对C++有了相当深入的理解才可以写出模板。模板
本身不是类或函数；相反可以将模板看作为(四声）编译器生成类或函数编写的一份说明。编译器根据模板创建类或函数的过程称为实例化，当
使用模板时，需要指出编译器应该把类或函数实例化成何种类型！！！
	对于类模板，我们通过提供一些额外信息来指定模板到底实例化成什么类，需要提供哪些信息由模板决定。提供信息的方式总是这样的：即在
模板名字后面跟一对尖括号，在括号内放上信息。以vector为例，提供的额外信息是vector内所存放对象的类型：
						vector<int> ivec;//ivec存放int类型的对象
						vector<Sales_item>	Sales_vec;//保存Sales_item类型的对象
						vector< vector<string>>	file;//该向量的元素是vector对象。
vector能容纳绝大多数类型的对象作为其元素，但是因为引用不是对象，所以不存在包含引用的vector。除此之外，其他大多数内置类型和类类型都可以
构成vector对象，甚至组成vector的元素也可以是vector。需要指出的是，在早期版本的C++标准中如果vector的元素还是vector（或者其他模板
类型），则其定义的形式与现在的C++11新标准略有不同。过去，必须在外层vector对象的右尖括号和其元素类型之间加一个空格，如
						vector<vector<int> >

定义和初始化vector对象
	和任何一种类类型一样，vector模板控制着定义和初始化向量的方法。表3.4列出了定义vector对象的常用方法：
				vector<T>	v1						v1是一个空vector，它潜在的元素是T类型的，执行的是默认初始化！
				vector<T>	v2(v1)					v2中包含v1所有元素的副本//拷贝初始化
				vector<T>	v2 = v1					等价于v2(v1),v2中包含v1所有元素的副本//直接初始化
				vector<T>	v3(n,val)				v3包含了n个重复的元素，而且每个元素都是val;//其实这个就是string
				vector<T>	v4(n)					v4包含了n个重复地执行了值初始化的对象
				vector<T>	v5{a,b,c...}			v5包含了初始值个数的元素，每个元素都被赋予相应的初始值
				vector<T>	v5={a,b,c...}			等价于v5{a,b,c...}
其实上述的初始化操作和以往的初始化是一样的，无须特意记住，但是一定要记住最基础的那些初始化方式。
				vector<string>	svec;//默认初始化，sevc不含任何元素
看起来vector好像没什么用，但是很快我们就会知道程序在运行时可以很高效的往vector对象中添加元素。事实上，最常见的方式就是先
定义一个空vector，然后当运行时获取到元素的值后再逐一添加。当然也可以在vector对象时指定元素的初始值。例如，允许把一个vector对象
的元素拷贝给另外一个vector对象。此时，新vector对象的元素就是原vector对象对应元素的副本。注意两个vector对象的类型必须相同：
				vector<int>	ivec;					//初始状态为空
				vector<int>	ivec2(ivec);			//把ivec的元素拷贝给ivec2
				vector<int>	ivec3 = ivec2;			//把ivec的元素拷贝给ivec3
				vector<string>	svec(ivec2);		//错误:svec的元素是string对象，不是int

列表初始化vector对象
	C++11新标准还提供了另外一种vector对象的元素赋初值的方法，即列表初始化。此时，用花括号括起来的0个或多个初始值元素值被赋给vector
对象：
					vector<string>	articles = {"a","an","the"};
上述vector对象包含三个元素：第一个是字符串"a",第二个是字符串"an",第三个是字符串“the“。目前已经介绍过的两种例外情况是：
			>>>>其一，使用拷贝初始化时（即使用=时）只能提供一个初始值；
			>>>>其二，如果提供的是一个类内初始值，则只能使用拷贝初始化或使用花括号的形式初始化。
			>>>>第三种特殊的要求是，如果提供的是初始值元素值的列表。则只能把初始值都放在花括号里进行列表初始化，而不能放在圆括号里

				vector<string>	v1{"an","an","the"};		 //列表初始化
				vector<string>	v2("an","an","the");		//错误
创建指定数量的元素
	还可以用vector对象容纳的元素数量和所有元素的统一初始值来初始化vector对象：
				vector<int>	ivec(10,-1);		//10个int类型的元素，每个元素的值是-1
				vector<string>	svec(10,"hi");	//10个string类型的元素，每个元素的值是hi
值初始化：
	通常情况下，可以只提供vector对象容纳的元素数量而不用略去初始值。此时库会创建一个值初始化的（value-initialized）元素初值，并
把它赋给容器中的所有元素。这个初值由vector对象中元素的类型决定。如果vector对象的元素是内置类型，比如int，则元素初始值自动设为0。如
果元素是某种类类型，比如string，则元素由类默认初始化。
				vector<int>	ivec(10);		//10个元素，每个元素的值是0
				vector<string>	svec(10);	//10个元素，每个元素的值是空的string对象
对这种初始化的方式有两个特殊限制：
		>>>>>其一，有些类要求必须明确地提供初始值，如果vector对象中元素的类型不支持默认初始化，我们就必须提供初始的元素值。对这种
类型的对象来说，只提供元素的数量而不设定初始值无法完成初始化工作。
		>>>>>其二，如果只提供了元素的数量而没有设定初始值，只能使用直接初始化

列表初始值还是元素数量？
	在某些情况下，初始化的真实含义依赖于传递初始值时用的是花括号还是圆括号。例如，用一个整数来初始化vector<int>时，整数的含义可能
是vector对象的容量也可能是元素的值。类似的，用两个整数来初始胡vector<int>时，这两个整数可能一个是vector对象的容量，另一个是元素
的初始值，也可能一个是vector对象的容量，另一个是元素的初值，也可能他们是容量为2的vector对象中两个元素的初始值。通过使用花括号或圆
括号可以区分上述这些含义：
				vector<int>	v1(10);			//v1有10个元素，每个元素的值都是0
				vector<int>	v1{10};			//v1有一个元素，该元素是10
				vector<int>	v3(10,1);		//v3有10个元素，每个元素的值都是1
				vector<int>	v4{10,1};		//v4有两个元素，值分别是10和1
如果使用的是圆括号，可以说提供的值是用来构造vector对象的。例如，v1的初始值说明了vector对象的容量;v3的两个初始值分别说明了vector对象的容量和元素的初始值。
  如果用的是花括号，可以表述成我们想列表初始化（list initialize）该vector对象。也就是说，初始化过程会尽可能把花括号内的初始值当成是元素值的列表来处理，只有无法执行初始化列表的时候才会考虑其他初始化方式！
  另一个方面，如果初始化时使用了话括号的形式但是提供的值又不能用来列表初始化，就要考虑用这样的数值来构造vector对象了。例如，要想列表初始化一个含有string对象的vector对象，应该提供能给string对象的初始值。此时不难区分到底是要列表初始化vector对象的元素还是用给定的容量值来构造vector对象：
		vector<string> v5{"hi"}	   //列表初始化：v5有一个元素
		vector<string>	v6("hi")   //错误，不能使用字符串字面值构建vector对象（）中第一个参数表示的是你的vector对象的容量
		vector<string> 	v7{10}	  //v7有10个默认初始化的元素
		vector<string>	v8{10,"hi"} //v8有10个值为hi的元素
尽管上面的例子中除了第二条语句之外都用了花括号，但其实只有v5是列表初始化。要想列表初始化vector对象，花括号中的值必须与元素类型一样！！！显然不能使用int初始化string对象，所以v7和v8提供的值不能作为元素的初始值。所以只能使用别的方法来解释这种情况，编译器就把它当成给定容量值来构造vector对象。	
3.3.2	向vector对象中添加元素
  如果想创建一个vector对象令其包含从0到9共十个元素，使用列表初始方法可以很简单的做到：但是如果vector对象包含的元素是从0到99或者从0到999呢？这时通过初始化把所有元素都一一列出来就不太合适了。对于此例来说，更好的处理方法是先创建一个空的vector，然后在运行时候再利用Vector的成员函数push_back向其中添加元素。push_back负责把一个值当成vector对象的尾元素“压到（push）”vector对象的“尾端（back）”。例如：
		vector<int> v2;
		for(int i=0;i!=100;i++)
			v2.push_back(i);//依次把整数值放到v2尾端
在上例中，尽管知道vector对象最后会包含100个元素，但在一开始还是把它声明成一个空的vector（而不是声明一个100个空的元素的vector）。
  同样的，如果直到运行时才能知道vector对象中元素的确切个数，也应该使用刚刚这种方法创建vector对象并为其赋值。例如：
		string word;
		vector<string> text;
		while(cin>>word)
			text.push_back(word);//把word添加到text后面
向vector对象添加元素蕴含的编程假定
  由于能高效便捷地向vector对象中添加元素，很多编程工作被极大的简化了。然而，这种简便性也伴随着一些对编写程序更高的要求：其中一条就是必须要确保所写的循环正确无误，特别是在循环中有可能要改变vector对象容量的时候。
  随着对vector的更多使用，我们还会逐渐了解到其他一些隐含的要求，其中一条是现在就要指出来的：
	如果循环体内部包含有向vector对象中添加元素的语句，则不能使用范围for循环，具体原因将在5.4.3详细解释。
3.3.3 其他vector操作
  除了push_back之外，vector还提供了几种其他操作，大多数都和string的相关操作类似，表3.5列出了其中比较重要的一些：
		v.empty()	如果v中不包含任何元素，返回真；否则返回假
		v.size()	返回v中元素的个数
		v.push_back(t)	向v的尾端添加一个值为t的的元素
		v[n]		返回v中第n个位置上元素的引用
		v1=v2		用v2中的元素拷贝替换v1中的元素
		v1={a,b,c....}	用列表中元素的拷贝替换v1中的元素
		v1 != v2
		v1 == v2  	判断v1和v2的元素数量以及对应位置上的元素值是否都相同，如相同就是v1==v2；反之v1!=v2
		<,<=,>,>=	顾名思义，以字典的顺序进行比较 
  vector的empty和size两个成员与string的同名成员功能完全一直：empty检查vector对象是否包含元素然后返回一个布尔值；size则返回vector对象中元素的个数，返回值的类型是由vector定义的size_type类型。
			vector<int>::size_type	//正确
			vector::size_type	//错误，因为没有具体到哪一个类型的size_type

不要用下表形式添加元素
  刚接触C++语言的程序员也许会认为可以通过vector对象的下标形式来添加元素，事实并非如此（只能通过push_back进行压栈）。下面的代码是错误的，其试图想为vector对象ivec添加10个元素：
		vector<int>	ivec;
		for(decltype(vec.size()) ix = 0;ix != 10;++ix)
			ivec[ix]=ix;//严重错误，ivec不包括任何元素。
上面这段代码是错误的：ivec是一个空的vector，根本不包含任何元素，当然也就不能通过下标去访问任何元素，正确的方法是使用push_back方法；
		for(decltypep(vec.size()) ix= 0;ix != 10;++ix)
			ivec[ix]=ix;
注意：
	vector对象（以及string对象）的下标运算符可用于访问已经存在的元素，但是不可以用于添加元素。（只有数组才可以增加）注意这里讲的是添加，不是修改。vector对象和string对象是可以通过下表进行修改的！比如说：
			vector<int> numbers{10,20,30};//声明一个vector，并且已经初始化
			for(int i = 0;i<3;i++)
				numbers[i] = numbers[i] + 10;//已经有的元素是可以通过下表进行修改的
但是注意，如果声明的一个vector对象是空的话，那么是不可以通过vector的下标进行相应的添加元素的。
	所以，上面的注意是对的，vector和string对象是不可以通过下标进行扩展的；下标是可以访问的，并且也可以进行修改的！！！

3.4	迭代器介绍
  我们已经知道可以使用下标运算符来访问string对象的字符或vector对象的元素，还有另外一种更通用的机制也可以实现同样的目的，这就是迭代器（iterator）。所有标准库容器都可以使用迭代器，但是其中只有少数几种才同时支持下标运算符。严格来说，string对象不属于容器类型，但是string支持很多与容器类型类似的操作。vector支持下标运算符，这点和string一样；string支持迭代器，这和vector是一样的。
  类似于指针类型，迭代器也提供了对对象的间接访问。就迭代器而言，其对象是容器中的元素或者string对象中的字符，使用迭代器可以访问某个元素，迭代器也能从一个元素移动到另外一个元素。迭代器有有效和无效之分，这一点和指针差不多。有效的迭代器或指向某个元素，或者指向容器中尾元素的下一个位置；其他所有情况都属于无效。
3.4.1	使用迭代器
  和指针不一样的是，获取迭代器不是使用取地址符，有迭代器的类型同时拥有返回迭代器的成员。比如，这些类型都拥有名为begin和end的成员，其中begin成员负责返回指向第一个元素（或第一个字符）的迭代器。如有下述语句：
		//由编译器决定b和e的类型
		//b表示v的第一个元素，e表示v尾元素的下一位置
		auto b = v.begin(),e = v.end();
end成员负责返回指向容器（或string对象）“尾元素的下位置（one past the end）”的迭代器，也就是说，该迭代器指示的是容器一个本不存在的“尾后（off the end）”元素。这样的迭代器没什么实际含义，仅仅是个标记而已，表示我们已经处理完了容器中的所有元素。end成员返回的迭代器常常被称作为尾后迭代器（off-the-end iterator）或者简称为尾迭代器（end iterator）。特殊情况下如果容器为空，则begin和end返回的是一个迭代器。
  一般来说，我们不清楚（不在意）迭代器准确的类型到底是什么。在上面的例子中，使用auto关键字定义变量b和e，这两个变量类型也就是begin和end的返回值类型。

迭代器运算符
  			表3.6：标准容器迭代器的运算符
		*iter			返回迭代器iter所指元素的引用
		iter->mem		解引用iter并获取该元素的名为mem的成员，等价于（*iter).mem
		++iter			令iter指示容器中的下一个元素
		--iter			令iter指示容器中的上一个元素
		iter1 == iter2		判断两个迭代器是否相等（不相等），如果两个迭代器指示的是同一个元素或者他们是同一个容器的尾后迭代器，则相等；反之不相等。
和指针类似，也可通过解引用迭代器来获取它所指示的元素，执行解引用的迭代器必须合法并确实指着某个元素。试图解引用一个非法迭代器或者尾后迭代器都是未被定义的行为。下面利用迭代器实现一个将string对象的第一个字母改成大写形式：
			string s("some string");
			if(s.begin() != s.end())
			{
				auto it = s.beign();
				*it = toupper(*it);
			}
注意，本例子中首先判断的是这个额s是否是空，也就是为了下面通过解引用进行相应的操作合法性进行判断。所以在使用这些解引用，下标操作的时候一定要注意：确保操作的合法性。
关键概念：
	原来使用C或Java的程序员在转而使用C++语言之后，会对for循环中使用!=而非<进行判断有点奇怪，比如上面的这个程序以及85页的那个。C++程序员习惯性地使用!=，其原因和他们更愿意使用迭代器而非下标的原因一样：因为这种编程风格在标准库提供的所有容器上都有效。之前说过，只有string和vector等一些标准库类型有下标运算符，而并非全都如此。与之类似，所有标准库容器的迭代器都定义了==和!=，但是他们中大多数都没有定义<运算符。因此，只要我们养成使用迭代器和!=的习惯，就不用太在意用的到底是哪种容器类型。
迭代器类型
  就像不知道string和vector的size_type成员到底是什么类型一样，一般我们也不知道迭代器的精确类型，而实际上，那些拥有迭代器的标准库类型使用iterator和const_iterator来表示迭代器的类型：
		vector<int>::iterator	it;//it能读写vector<int>的元素
		string::iterator it2;	//it2能读写string对象中的字符
		vector<int>::const_iterator it3;//it3只能读元素，不能写元素
		string::const_iterator it4;//it4只能读字符，不能写字符
const_iterator和常量指针差不多，能读取但不能够修改它所指的元素值。相反,iterator的对象可读写，如果vector对象或string对象是一个常量，只能使用const_iterator；如果vector对象或string对象不是常量，那么既能使用iterator也能使用const_iterator。
begin 和 end运算符
  begin和end运算符返回的具体类型由对象是否是常量决定，如果对象是常量，begin和end返回const_iterator；如果对象不是常量，返回iterator：
			vector<int> v;
			const vectir<int> cv;
			auto it1 = v.begin();//it1的类型是vector<int>::iterator
			auto it2 = cv.begin();//it2的类型是vector<int>::const_iterator
有时候，这种默认的行为并非我们索要，如果对象只需要操作而无需写操作的话，最好使用常量类型（比如const_iterator)。为了便于专门得到const_iterator类型的返回值，C++11新标准引入了两个新函数，分别是cbegin和cend：
			auto it3 = v.cbegin();//it3的类型是vector<int>::const_iterator
  类似于begin和end，上述两个新函数也分别返回指示容器第一个元素或最后元素下一位置的迭代器。有所不同的是，不论vector对象本身是否是常量，返回值都是const_iterator。
结合解引用和成员访问操作
  解引用迭代器可以获得迭代器所指的对象，如果该对象的类型恰好是类，就有可能希望进一步访问它的成员。例如，对于一个由字符串组成的vector对象来说，需要想检查其元素是否为空，令it是该vector对象的迭代器，只需要检查it所指字符串是否为空就可以了，其代码如下所示：
			(*it).empty()
注意，(*it).empty()中的圆括号必不可少，具体原因将在以后介绍。该表达式的含义是先对it解引用，然后解引用的结果再执行点运算符。如果不加圆括号，点运算符将由it来执行，而非it解引用的结果：
			(*it).empty()
			it.empty();//这个是错误的，就好像是指针一样，先得得到it所指的对象才可以使用其方法，这里也必须得先找到迭代器所指向的对象才可以使用其方法。
  为了简化上述表达式，C++语言定义了箭头运算符(->)。箭头运算符把解引用和成员访问两个操作结合在一起，也就是说，it->mem和(*it).mem表达的意思是一样的。
  例如，假设用一个名为text的字符向量存放文本文件中的数据，其中的元素或者是一句话或者是一个用于表示段落分割的空字符串。如果要输出text中的第一段的内容，可以用的迭代器写一个for循环令其遍历text，直到遇到空字符串的元素为止：
			for(auto it = text.cbegin(),it != text.cend() && !it->empty(),++it)
				cout<<*it<<endl;

某些对vector对象的操作会使迭代器失效
  虽然vector对象可以动态地增长，但是也会有一些副作用。已知的一个限制是不能在范围for循环中向vector对象添加元素。另外一个限制就是任何一种可能改变vector对象容量的操作，比如push_back，都会使该vector对象的迭代器失效。
	谨记：但凡是使用了迭代器的循环，都不要向迭代器所属的容器中添加元素！
3.4.2	迭代器运算
  			vector和string迭代器支持的运算
	iter + n	迭代器加上一个整数值仍得到一个迭代器，迭代器指示的新位置与原来的新位置与原来相比向前移动了n个元素。结果迭代器或者指示容器内的一个元素，或者指示容器尾部元素的下一个位置。
	iter - n	迭代器减去一个整数值仍得到一个迭代器，迭代器指示的新位置与原来相比向后移动了若干个元素，结果迭代器或者指示容器内的一个元素，或者指示容器尾元素的下一个位置
	iter1 += n	迭代器加法的复合赋值语句，将iter1加n的结果赋值给iter1
	iter1 -= n	迭代器减法的复合赋值语句，将iter1减n的结果赋值给iter1
	iter1 - iter2	两个迭代器相减的结果是他们之间的距离，也就是说，将运算符右侧的的迭代器向前移动差值个元素后得到左侧的迭代器，参与运算的两个迭代器必须指向的是同一个容器中的元素或者尾元素的下一个位置。
	>,>=,<,<=	迭代器的关系运算符，如果某迭代器指向的容器的位置在另一个的迭代器所指位置之前，则说明前者小于后者，参与运算的两个迭代器必须指向的是同一个容器中的元素或者尾元素的下一位置

使用迭代器运算
  使用迭代器运算的一个经典算法是二分搜素。二分搜索从有序序列中寻找某个给定的值。二分搜索从序列中间的位置开始搜索，如果中间位置的元素正好就是要找的元素，搜索元素大于要找的元素，则在序列的前半部分继续搜索。在缩小的范围中计算一个新的元素并重复之前的过程，直至最终找到目标或者没有元素可以继续搜索。
  下面的程序使用迭代器完成二分搜索：
		auto begin = text.begin(),end = text.end();
		auto mid = begin + (end - begin)/2;
		while(mid != end && *mid != sought)
		{
			if(sought < *mid)
				end = mid;
			else
				begin = mid + 1;
			mid = begin + (end - begin)/2;
		}	

3.5	数组
  数组是一种类似与标准库类型vector的数据结构，但是在灵活性和性能的权衡上又与vector有所不同。与vector相似的地方就是，数组也是存放类型相同的对象的容器，这些对象本身没有名字，需要通过其所在位置访问。与vector不同的地方是，数组的大小确定不变，不能随意向数组中增加元素。因为数组的大小固定。因此对某些特殊的应用来说程序的运行时性能好，但是相应的也损失了一些灵活性。
3.5.1	定义和初始化内置数组
  数组是一种复合类型。数组的声明形如a[d]，其中a是数组的名字，d是数组的维度。维度说明了数组中元素的个数，因此必须大于0,。数组中元素的个数也属于数组类型的一部分，编译的时候维度应该是已知的。也就是说，维度必须是一个常量表达式：
		unsigned cnt = 24;	//不是常量表达式，这个是一个变量
		constexpr unsigned sz = 42;//常量表达式
		int *parr[sz];		//这是一个数组，数组的类型是一个指向int类型的指针
		string strs[get_size()];//当get_size()是一个constexpr的时候正确，否则错误。
  定义数组的时候必须指定数组的类型，不允许使用auto关键字由初始值的列表推断类型！！！！
显示初始化数组元素
  可以对数组的元素进行列表初始化，此时允许忽略数组的维度。如果在声明时没有指明维度，编译器会根据初始值的数量计算并推断出来；相反，如果指明了维度，那么初始值的总量不应该超出指定的大小。如果维度比提供的初始值数量大，则用提供的初始值初始化靠前的元素，剩下的元素被初始化成默认值。
字符数组的特殊性
  字符数组有一种额外的初始化形式，我们可以用字符串字面值对此类数组初始化。当使用这种方式时，一定要猪油字符串字面值的结尾处还有一个空字符('\0')，这个空字符也会像字符串的其他字符一样被拷贝到字符数组中去：
		char a1[] = {'C','+','+'};	//列表初始化
		char a2[] ="C++";

不允许拷贝和赋值
  不能将数组的内容拷贝给其他数组作为其初始值，也不能用数组为其他数组赋值：
		int a[] = {0,1,2};
		int a2[] = a;//错误，不能使用同一个数组初始化给另一个数组
		a2 = a;//错误，不能把一个数组直接赋值给另一个数组
理解复杂的数组声明
  和vector一样，数组能存放大多数类型的对象。例如，可以定义一个存放指针的数组。又因为数组本身就是对象，所以允许定义数组的指针数以及数组的引用。在这几种情况中，定义存放指针的数组比较简单和直接，但是定义数组的指针或数组的引用就稍微复杂一点了：
		int *ptrs[10];	//ptrs是含有10个整形指针的数组
		int &refs[10] = /*?*///错误，不存在引用的数组
		int (*Parrary)[10]=&arra;	//Parray指向一个含有10个整数的数组
		int (&arrRef)[10] = arr;	//arrRef引用一个含有10个整数的数组
默认情况下，类型修饰符从右向左一次绑定。对于ptrs来说，从右向左理解其含义比较简单：首先知道我们定义的是一个大小是10的数组，它的名字是ptrs，然后我们知道数组中存放的是指向int的指针。
  但是对于Parray来说，从右向左理解就不太合理了。因为数组的维度是紧跟着声明的名字的。但是需要注意的是，因为数组本身是一个复合类型的数据类型。所以，其实本身就是:
		数据类型  数组名[];//这个方括号和数组类型一并组成数组，而数组名仅仅就是一个变量名而已。
所以
		int (*Parray)[10] = &arr;
首先根据优先性，可以看出*Parray，这个是一个指针类型的，再看下一个，根据右结合（从右往左看），是一个[10]是数组，所以指向的是一个数组，接下来看左边，发现只有int，所以这是一个指向整形数组的指针！
所以:
		int *(&arry)[10] = ptrs;//首先根据优先级，发现这是一个引用，然后根据右结合发现是一个数组，然后向左看，发现是一个int * 类型的也就是指针类型。所以这是一个有10个指针的数组的引用。

3.5.2	访问数组元素
  与标准库类型vector和string一样，数组的元素也能使用范围for语句或下标运算符来访问。数组的索引从0开始，以一个包含10个数组为例，它的索引从0到9，而非从1到10.
  在使用数组下标的时候，通常将其定义为size_t类型。size_t是一种机器相关的无符号类型，它被设计的足够大以便能够表示内存中任意对象的大小。在cstddef头文件中定义了size_t类型，这个文件是C标准库stddef.h头文件的C++语言版本。
  与vector和string一样，当需要遍历数组的所有元素时，最好的办法也是使用范围for语句。例如，下面的程序输出所有的scores:
		for(auto i : scores)
			cout<<i<<endl;
检查下标的值
  大多数常见的安全问题都源于缓冲区溢出错误。当数组或其他类似数据结构的下标越界病试图访问非法内存区域时，就会产生此类错误。
3.5.3 指针数组
  在C++语言中，指针和数组有非常紧密的联系。就如即将介绍的，使用数组的时候编译器一般会把它转换成指针。数组有一个特性：在很多用到数组名字的地方，编译器都会自动将其替换为一个指向数组元素的指针：
		string *p2 = nums;//等价于p2 = &nums[0];
由上可知，在一些情况下数组的操作实际上是指针的操作，这一结论有很多隐含的意思。其中一层意思是当使用数组作为一个auto变量的初始值时，推断得到的类型是指针而非是数组！
		int ia[] = {0,1,2,3,4,5,6,7,8,9};
		auto ia2(ia);	//ia2是一个整形的指针，指向ia的第一个元素
		ia2 = 42;//错误，ia2是一个指针，不能用int值给指针赋值！
必须指出的是，当使用decltype关键字时上述转换不会发送，decltype(ia)返回的类型是由10个整数构成的数组：
		decltype(ia) ia3 = {0,1,2,3,4,5,6,7,8,9};
		ia3 = p;//错误，不能用整形的指针给数组赋值
		ia3[4] = i;//正确，把i的值付给ia3的一个元素
小结：
	auto ia3(ia);返回的结果是一个指针类型
	decltype(ia)返回的结果是一个ia的数组类型！
所以两者是不一样的！

指针也是迭代器
  指向数组元素的指针拥有更多功能。vector和string的迭代器支持的运算，数组的指针全都支持。例如，允许使用递增运算符将指向数组元素的指针向前移动到下一个位置上：
		int arr[] = {0,1,2};
		int *p = arr;
		++p;//p指向arr[1];
就像使用迭代器遍历vector对象中的元素一样，使用指针也能遍历数组中的元素。当然，这样做的前提是先得获取到指向数组第一个元素的指针和指向数组尾元素的下一位置的指针。之前已经介绍过，通过数组名字或者数组中首元素的地址都能得到指向首元素的指针：不过获取尾后指针就要用到数组的另外一个特殊性质了。我们可以设法获取数组尾元素之后的那个并不存在的元素的地址：
		int *e = &arr[10];	//指向arr尾元素的下一位置的指针
这里显然使用下标运算符索引了一个不存在的元素，arr有10个元素，尾元素所在位置的索引是9，接下来那个不存在的元素唯一的用处就是提供其地址用于初始化e。就像是尾后迭代器一样，尾后指针也不指向具体的元素。因此，不能对尾后指针执行解引用或递增的操作。

标准库函数 begin和end
  尽管计算得到尾后指针，但这种用法极易出错。为了让指针的使用更简单、更安全，C++11新标准引入了两个名为begin和end的函数。这两个函数与容器中的两个同名成员功能类似，不过数组毕竟不是类类型，因此这两个函数不是成员函数。正确的使用形式是将数组作为他们的参数：
		int ia[]={0,1,2,3,4,5,6};
		int *beg = begin(ia);
		int *last = end(ia);
begin函数返回指向ia首元素的指针，end函数指向ia尾元素下一位置的指针，这两个函数定义在iterator头文件中。

比较字符串
  比较两个C风格字符串的方法和之前学习过的比较标准库string对象的方法大相径庭。比较标准库string对象的时候，用的是普通关系运算符和相等性运算符：
		string s1 = "A string example";
		string s2 = :A different string";
		if ( s1 < s2)
如果把这些运算符用在两个C风格字符串上，实际比较的是指针而非字符串本身：
		const char cal1[] = "A string example";
		const char cal2[] = "A different string";
		if(cal1 < cal2)//未定义的：试图比较两个无关的地址，
谨记之前介绍过的，当使用数组的时候，其实真正用的是指向数组首元素的指针。因此，上面的if条件实际上比较的是两个const char *的值。这两个指针指向的并非同一对象，所以得到未定义的结果。
  要想比较两个C风格的字符串需要调用strcmp函数，此时比较的就不是指针了。

目标字符串的大小由调用者指定：
  连接或拷贝C风格字符串也与标准库string对象的同类操作差别很大。例如，要想把刚刚定义的两个string对象s1和s2连接起来，可以直接写成下面的形式：
		string largeStr = s1 + " " + s2;
同样的操作如果放到cal1 和 cal2这两个数组身上就会产生错误了。表达式cal1 + cal2试图将两个指针想加，显然这样的操作就没有什么意义了，也肯定就是非法的。
注意：
	string在C++是一个类，它定义的是一个类的对象。而且对象中有很多方法可以使用，所以>,>=,<,<=,+等运算操作都是可以有的（这也就是方法重载的好处）。但是在数组中，C风格的字符串，其实就是指针，所以两个C风格的字符串就是两个不同的指针。但是对于指针来说，对指针的操作都是基于同一个指针来说的，两个不同的指针，没有什么+,<,<=,>,>=等操作，所以这些操作在C语言中都是调用C中的库函数来进行操作的。strcmp,strcat，strcpy等等。

3.5.5 与旧代码的接口
  很多C++程序在标准库出现之前就已经写成了，它们肯定没有用到string和vector类型。而且，有一些C++程序实际上是与C语言或其他语言的接口程序，当然也无法使用C++标准库。因此，现代的C++程序不得不与那些充满了数组和/或C风格字符串的代码衔接，为了使这些工作简单易行，C++专门提供了一组功能。
混用string对象和C风格字符串
  更一般的情况是，任何出现字符串字面值的地方都可以用以空字符结束的字符数组来替代：
	>>>允许使用以空字符结束的字符数组来初始化string对象或为string对象赋值
	>>>在string对象的加法运算中允许以空字符结束的字符数组作为其中一个运算对象（不能两个对象都是）；在string对象的复合赋值运算中允许使用以空字符结束的字符数组作为右侧的运算对象
上述性值反过来就不成立了：如果程序的某处需要一个C风格字符串，无法直接使用string对象来替代它。例如，不能使用string对象直接初始化指向字符的指针。为了完成该功能，string专门提供了一个名为c_str的成员函数：
		string s("hello World");
		char *str = s;//错误，不能使用string对象初始化char *
		const char *str = s.c_str();//正确
顾名思义，c_str函数的返回值是一个C风格的字符串。也就是说，函数的返回结果是一个指针，该指针指向一个以空字符结束的字符数组，而这个数组所存在的数据恰好与那个string对象的一样。结果指针的类型就是const char*，从而确保我们不会改变字符数组的内容。  
注意：
	我们无法保证c_str函数的返回数组一直有效，事实上，如果后续的操作改变了s的值就可能让之前返回的数组失去效用。如果执行完c_str()函数后程序一直都能使用其返回的数组，最好将该数组重新拷贝一份。（本人在这里测试了下，如果后期改变了原先指定的数组的指针，就失效了，也就是不存在了！！）

使用数组初始化vector对象
  前面介绍过不允许使用一个数组为另一个内置类型的数组赋初始值，也不允许使用vector对象初始化数组。相反的，允许使用数组来初始化vector对象。要实现这一目的，只需要指明拷贝区域的首元素地址和尾后地址就可以了：
		int int_arr[] = {0,1,2,3,4,5};
		vector<int> ivec(begin(int_arr),end(int_arr));
在上述代码中，用于创建ivec的两个指针实际上指明了用来初始化的值在数组int_arr中的位置，其中第二个指针应该指向待拷贝区域尾元素的下一位置。此例中，使用标准库函数begin和end来分别计算int_arr的首指针和尾后指针。在最终的结果中，ivec将包含6个元素，他们的次序和值都与数组int_arr完全相同！

3.6	多维数组
  严格来说，C++语言中没有多维数组，通常所说的多维数组其实是数组的数组。谨记这一点，对今后理解和使用多维数组大有益处。
  当一个数组的元素仍然是数组时，通常使用两个维度来定义它：一个维度表示数组本身的大小，另外一个维度表示其元素的大小：
		int ia[3][4];//大小为3的数组，每个元素是含有4个整数的数组！
		//大小为10的数组，它的每一个元素都是大小为20的数组，
		//这些数组的元素都是含有30个整数的数组！
		int arr[10][20][30];
按照从左到右的顺序阅读此类定义有助于更好的理解其真实的含义。

多维数组的初始化：
  允许使用花括号括起来的一组值初始化多维数组，这点和普通的数组一样。下面的初始化形式中，多维数组的每一行分别用花括号括起来：
		int ia[3][4] = {
				{0,1,2,3},
				{4,5,6,7},
				{8,9,10,11}
				};
例如下面的例子：	
		int ia[2][3];		
		int (&row)[4] = ia[1]
这个表示的是，先定义一个int类型的数组的引用，然后将其绑定到ia的第二层中！

使用范围for语句处理多维数组
  由于在C++11新标准中新增了范围for语句，所以前一个程序可以简化成如下形式：
		size_t cnt = 0;
		for(auto &row : ia)
			for(auto &col : row)
			{
				col = cnt;
				++cnt;
			}
在上面的例子中，因为要改变数组元素的值，所以我们选用类型操作为循环控制变量，但其实还有一个深层次的原因促使我们这么做。举一个例子，考虑如下的循环：
			for(const auto &row : ia)
				for(auto col : row)
					cout<<col<<endl;
这个循环中并没有任何写操作，可是我们还是将外层循环的控制变量写成了引用类型，这是为了避免数组被自动转换成指针。假设不用引用类型，则循环如下所述形式：
			for(auto row : ia)
				for(auto col:row)
程序将无法通过编译。这是因为像之前一雅漾第一个循环遍历ia的所有元素，注意这些元素实际上是大小为4的数组。因为row不是引用类型，所以编译器初始化row会自动将这些数组形式的元素（和其他类型的数组一样）转换成指向该数组内首元素的指针。这样得到的row的类型就是int *，显然内层循环就不合法了！编译器试图在一个int *内遍历，这显然和程序的初衷相去甚远。
小结：
		要使用范围for语句处理多维数组，除了最内层的循环外，其他所有循环的控制变量都应该是引用类型。
