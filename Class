				第七章	类
内容
	7.1	定义抽象数据类型
	7.2	访问控制与封装
	7.3	类的其他特性
	7.4	类的作用域
	7.5	构造函数再探
	7.6	类的静态成员
  在C++中，我们使用类定义自己的数据类型，通过定义新的类型来反映待解决处理的各种概念。（这一点很重要，
在C中，我们最复杂的数据类型就是结构体了，但是结构体中是不能包含函数的，所以就会有一定的限制。而在
C++中，结构体就和类一样了，它可以具有相应的函数（行为），它可以使得数据表示的更加的完整，所以类就是
一种更加完善的数据类型，这样就可以通过构造不同的类，来实现对不同问题的建模了）
  类的基本思想是 数据抽象（data abstraction) 和 封装（encapsulation)。数据抽象是一种依赖于 
接口（interface）和 实现（implementation） 分离的编程（以及设计）技术。类的接口包括用户所能
执行的操作；类的实现则包括类的数据成员，负责接口实现的函数体以及定义所需的各种私有函数。
  封装实现了类的 接口 和 实现 的分离，封装后的类隐藏了它的实现细节，也就是说，类的用户只能使用 
接口 而无法访问 实现 部分。（这里就像是，我们平常开发的时候，只是需要知道对方的API，我们却不知道
对方的这个API的具体的实现一样。数据抽象是将你想要解决的问题进行一定的抽象成一定的数据模型，然后实
现就是写一些具体的函数，变量成员来进行相应的问题的解决。而封装就是将 接口 和 实现 进行分离，使得类
的用户只能使用相应的接口，却不能查看相应的 实现）


7.2	定义改进的Sales_data类
	struct Sales_data
	{
		std::string isbn() const { return bookNo; }
		Sales_data & combine(const Sales_data&);
		double avg_price() const;
		std::string bookNo;
		unsigned units_old = 0;
		double revenu = 0.0;
	}
	Sales_data add(const Sales_data&,const Sales_data&);
	std::ostream &print(std::ostream &,const Sales_data &);
	std::istream &read(std::istream &,const Sales_data &);
	如果一个函数成员并不是通用的，那么它应该属于类的实现的一部分，而不是接口，也就是说明如果是
接口的话，那么接口一定是大家都通用的，也就是最基本的实现，其他的实现你根据自己的需求自己去重新定
义相关的函数实现。
	定义和声明成员函数的方法与普通的函数差不多。不过注意：
		成员函数的声明必须得在类内部；而函数的实现可以在类内实现，也可以在类外边实现。但是作为
接口组成部分的非成员函数，它们的声明和定义就必须在类的外部实现。

引入this

	std::string isbn() const {	return bookNo;	}
让我们再一次观察对isbn()成员函数的调用：
	totol.isbn();
当我们调用成员函数时，实际是在替某个对象调用它。如果isbn关联了Sales_data的成员（例如bookNo），
则它隐式地指向调用该函数对象的成员。在上面的调用中，当isbn返回bookNo时，实际上它隐式的返回
total.bookNo。
	成员函数通过一个名为this的额外 隐式参数 来访问调用它的那个对象。当我们调用一个成员函数时，
用请求该函数的对象地址初始化this，如果调用
		total.isbn();
则编译器负责把total的地址传递给isbn的隐式参数this（也就是让this指向total）可以等价的认为编
译器将该调用重写成了如下的形式：
		//伪代码，用于说明调用成员函数的实际执行过程
		Sales_data::isbn(&total)
也就是说明，this指向的是一个调用该成员函数的一个对象，而且在类内的成员函数都是可以直接通过this
隐式的访问到其成员函数变量的。
	在成员函数内部，我们可以直接使用调用该函数的 对象 的成员，而无需通过成员访问符来做到这一点，
因为this所指的正是这个对象。任何类成员的直接访问都被看做this的隐式引用，也就是说，当isbn使用
bookNo的时候，它隐式的使用this指向的成员，就像我们书写了this->bookNo一样。
	对于我们来说，this隐式形参是隐式定义定义的。实际上，任何自定义名为this的参数或变量的行为
都是非法的。我们可以在成员函数体内部使用this，尽管没有必要，但我们还是能把isbn定义成如下形式：
			std::string isbn() const { return this->isbn};
因为this的目的总是指向“这个对象”，所以this是一个常量指针。我们不允许改变this中报存的地址。

引入const成员函数

	isbn函数的另一个关键之处是紧随参数列表之后的const关键字。这里，const的作用是修改隐式
this指针的类型。
	默认情况下，this的类型是指向 类类型非常量版本的常量指针。例如在Sales_data成员函数中，this
的类型是Sales_data * const。也就是this的值是不能改变的。尽管this是隐式的，但是它还是要遵循
初始化规则的，意味着（在默认情况下）我们不能在一个常量对象
（因为常量的指针是不可以改变自己
本身的值的，但是可以改变指向的对象的数值。所以，如果常量指针指向了常量对象，那么常量对象有可
能被修改了。所以在C++，这样是错误的，不允许操作的。但是在C中，这样是非法的，但可以赋值）这一
情况就使得我们不能在一个常量对象上调用普通的成员函数。
解释下为什么不能在常量对象上调用普通的成员函数:
	首先常量对象的类型是const Sales_data，而普通的成员函数中包含的this，都是Sales_data * 
const。而this，代表的是本身自己。所以如果常量对象调用普通的成员函数，那么就相当于下面的初始化:
			const Sales_data = total;
			Sales_data * const this = &total;
显然这个初始化的方式是错误的，不能将常量对象赋予指向非常量的指针中。
在类中，请谨记一点：
		类的对象中的所有的this类型都是类本身的类型！！！！ 
	如果isbn是一个普通函数而且this是一个普通的指针参数，则我们应该把this声明成const 
Sales_data * const。毕竟,在isbn的函数体内不会改变this所指向的对象，所以把this设置成为
指向常量的指针有助于提高函数的灵活性。
这里解释下为什么可以提高函数的灵活性：
		因为如果没有在成员函数后边加上const，那么this的类型是Sales_data * const。而isbn的职
责是仅仅返回类中成员对应的数值，所以为了尽可能满足所有成员的需求，可以设置为const Sales_data * 
const。因为这个类型可以满足常量对象的需求，也可以满足非常量对象的需求。但是仅仅是Sales_data * 
const的话，那么常量对象就不满足需求了。但是这并不是唯一的准则，这个准则是在你的成员函数仅仅是返
回数据，没有对数据进行操作的前提下。所以还是得根据需求来！
	然而，this是隐式的并且不会出现在参数列表中，所以在哪将this声明指向成指向常量的指针就成
为我们必须面临的问题。C++语言的做法是允许把关键字放在成员函数的参数列表之后，此时，紧跟在参数
列表之后的const表示this是一个指向常量的指针。像这样使用const的成员函数被称为常量成员函数。
	可以把isbn函数体想象成如下的形式：
	//伪代码，说明隐式的this指针是如何使用的
	//下面的代码是非法的：因为我们不能显示的定义自己的this指针
	//谨记此处的this是一个指向常量的指针，因为isbn是一个常量成员
	std::string Sales_data::isbn(const Sales_data * const this)
	{
		return this->bookNo;
	}
注意，之所以要这样做的目的是为了能使用该函数去调用那些常量对象，因为常量对象是不能赋值给this的。
所以产生了一种改变this类型的方法，就是 常量函数 。
	注意：
			常量对象，以及常量对象的引用或指针都只能调用常量成员函数。
	因为如果常量对象可以调用非常量的函数，那么就违反了this不能赋值常量对象的规则，所以常量对象，
常量对象的指针或引用必须得只能调用常量成员函数。但是普通的成员函数就可以使用普通的成员函数或者是
常量成员函数了。

类作用域和成员函数

	类的成员函数的定义嵌套在类作用域之内，因此，isbn中用到的名字bookNo其实就是定义在Sales_data
内的数据成员。
	值得注意的是，即使bookNo定义在isbn之后，isbn也还是能够使用bookNo。这是因为，编译器分两步处
理类：首先编译成员的声明，然后才轮到成员函数体（如果有的话）。因此成员函数体内可随意使用类中的其他
成员而不用在意这些成员函数出现的次序。
	注意：
			也就是说在C++编译类的时候，分两步完成的。首先编译类中的变量成员；然后再去编译相应的
成员函数体。

在类外部定义成员函数

	像其他函数一样，当我们在类的外部定义成员函数时，成员函数的定义必须与它的声明匹配。也就是说，返回
类型、参数列表和函数名都得与类内部的声明保持一致。如果成员被声明成常量成员函数，那么它的定义也必须在参
数列表之后明确制定const属性，同时，对外部定义的成员的名字必须包含它的所属的类名：
		double Sales_data::avg_price const
		{
			if(units_sold)
			{
				return revenue/units_sold;
			}
			else
			{
				return 0;
			}
		}
函数名Sales_data::avg_price使用作用域运算符来说明如下的事实：我们定义了一个名为avg_price的函
数，并且该函数被声明在类Sales_data的作用域内。一旦编译器看到这个函数名，就能理解剩余的代码是位于
类的作用域内的。因此，当avg_price使用revenue和units_sold时，实际上它隐式的使用了Sales_data
的成员。
	注意：
		其实，这也说明了类的作用域。首先你是类的成员函数，所以必须在类的作用域内定义。现在你在类
的外部定义，如果不加类的限制符的话，那么就有可能被认为是普通的函数，所以必须加上类名限定符来表明这
是一个类的内部成员函数。这样，我在成员函数中也可以使用相应的成员变量了。

定义一个返回this对象的函数

	函数combine的设计初衷类似于复合赋值运算符+=，调用该函数的对象代表的是赋值运算符左侧的运算对象，
右侧运算对象则通过显示的实参被传入函数：
		Sales_data & Sales_data::combine(const Sales_data &rhs)
		{
			units_sold += rhs.units_sold;
			revenue += rhs.revenue;
			return *this;
		}
当我们的交易处理程序调用如下的函数时，
		total.combine(trans);
total的地址被隐式的绑定到this参数上，而rhs绑定到trans上。因此，当combine执行下面的语句时，
		units_sold += rhs.units_sold;
效果等同于
		total.units_sold += rhs.units_sold;
该函数一个值得关注的部分是它的返回类型和返回语句。一般来说，当我们定义的函数类似于某个内置运算符时，
应该令该函数尽量模仿这个运算符。内置的赋值运算符把它的左侧运算对象当成左值返回，因此为了与它保持一
致，combine函数必须返回引用类型。因为只有引用类型的返回才可以继续作为左值，其他的类型的返回值都
是作为右值的。因为普通的返回类型都是返回其对应的副本值，而只有引用返回的是对返回对象的真实的引用，
所以可以作为左值。

7.1.3	定义类相关的非成员函数
	类的作者常常需要定义一些辅助函数，比如add、read和print等。尽管这些函数定义的操作从概念上来
说属于类接口的组成部分，但他们实际上并不属于类本身。我们定义非成员函数的方式与其他函数一样，通常把
函数的声明和定义分离开来。如果函数在概念上属于类但是不定义在类中，则它一般应与类声明在同一个头文件
内。在这种方式下，用户使用接口的任何部分都只需要引入一个文件。

定义read和print函数

	下面的read和print函数中的代码作用一样，而且代码本身也非常相似：
	istream &read(istream &is,Sales_data &item)
	{
		double price = 0;
		is >> item.bookNo >> item.units_sold >> price;
		item.revenue = price * item.units_sold;
		return is;
	}
	ostream &print(ostream &os,const Sales_data &item)
	{
		os << item.isbn() << " " << item.units_sold<< " " << item.revenue << " " << item.avg_price();
		return os;
	}
关于上面的函数有两点是非常重要的。第一点，read和print分别接受一个各自IO类型的引用作为其参数。
这是因为IO类属于不能被拷贝的类型，因此我们只能通过引用类来传递他们。而且，因为读和写的操作会改
变流的内容，所以两个函数接受的都是普通引用，而非对常量的引用。
第二点，print函数不负责换行。一
般来说，执行输出任务的函数应该尽量减少对格式的控制，这样可以确保由用户代码来决定是否换行。

7.1.4	构造函数
	每个类都分别定义了它的对象被初始化的方式，类通过一个或几个特殊的成员函数来控制其对象的
初始化过程，这些函数叫做构造函数(constructor)。构造函数的任务是初始化对象的数据成员，无论
何时只要类的对象被创建，就会执行构造函数。
	构造函数的名字和类名相同。和其他函数不一样的是，构造函数没有返回类型！！！除此之外类似
于其他的函数，构造函数也有一个（可能为空的）参数列表和一个（可能为空的函数体）。类可以包含多
个构造函数，和其他重载函数差不多，不同的构造函数之间必须在参数数量或参数类型上有所区别。
	不同于其他成员函数，构造函数不能被声明成const的。当我们创建类的一个const对象时，直到
构造函数完成初始化过程，对象才能真正取得其"常量"属性。因此，构造函数在const对象的构造过程中
可以向其写值！！

合成的默认构造函数

	我们的Sales_data类并没有定义任何构造函数，可是之前使用了Sales_data对象的程序仍然可
以正确的编译和运行。举个例子:
			Sales_data totol;
			Sales_data trans;
这时我们不禁要问：total和trans是如何初始化的呢？
	我们没有为这些对象提供初始值，因此我们知道他们执行了默认初始化。类通过一个特殊的构造函数
来控制默认初始化过程，这个函数叫做默认构造函数，默认构造函数无须任何实参。
	编译器创建的构造函数又被称为合成的默认构造函数。对于大多数来说，这个合成的默认构造函数将
按照如下规则初始化类的数据成员:
			>>>如果存在雷内的初始值，用它来初始化成员
			>>>否则，默认初始化该成员。

某些类不能依赖与合成的默认构造函数

	合成的默认构造函数只适合非常简单的类，比如上面讲述的Sales_data版本。对于一个普通的
类来说，必须定义它自己的默认构造函数，原因有三:
			>>>编译器只有在发现类不包含任何构造函数的情况下才会替我们生成一个默认构造
函数，一旦我们定义了一些其他的构造函数，那么除非我们再定义一个默认的构造函数，否则类将没有默认
的构造函数。这条规则的依据是，如果一个类在某种情况下需要对控制对象初始化，那么该类很可能在所有
情况下都需要控制。
			>>>合成的默认构造函数可能执行错误的操作。回忆我们之前介绍过的，如果定义在
块中的内置类型或复合类型（比如数组和指针）的对象被默认初始化，则他们的值将是未定义的。该准则同
时适用于默认初始化的你日志类型成员。因此，含有内置类型或复合类型成员的类应该在类内部初始化这些
成员，或者定义一个自己的默认构造函数。否则，用户在创建类的对象的时候可能得到未定义的值。如果类包
含内置类型或者复合类型的成员，则只有当这些成员全部被赋予了类内的初始值时，这个类才适合于使用合成
的默认构造函数。
			>>>有的时候编译器不能为某些类合成默认的构造函数。例如，如果类中包含一个其
他类类型的成员且这个成员的类型没有默认构造函数，那么编译器将无法初始化该成员。对于这样的类来说，
我们必须自定义默认构造函数，否则该类将没有可用的默认构造函数。

定义Sales_data的构造函数
	对于我们的Sales_data类来说，我们将使用下面的参数定义4个不同的构造函数:
		>>>>一个istream&，从中获取一条交易信息。
		>>>>一个const string&，表示ISBN编号；一个unsigned,表示售出的图书数量；
以及一个double，表示图书的售出价格。
		>>>>一个const string&，表示ISBN编号；编译器将赋予其他成员的默认值。
		>>>>一个空的参数列表（即默认构造函数），正如刚刚介绍的，既然我们已经定义了其他的
构造函数，那么也必须定义一个默认构造函数。

		struct Sales_data
		{
			Sales_data() = default;
			Sales_data(const std::string &s):bookNo(s){}
			Sales_data(const std::string &s,unsigned n,double p):bookNo(s),units_sold(n),revenue(p*n){}
			Sales_data(std::istream &);
		}

=default的含义
	我们从解释默认构造函数的含义开始：
		Sales_data() = default;
首先请明确一点：因为该构造函数不接受任何实参，所以他是一个默认构造函数。我们定义这个构造函数的
目的仅仅是因为我们既需要其他形式的构造函数，也需要默认的构造函数，我们希望这个函数的作用完全等
同于之前使用的合成的默认构造函数。
	在C++11新标准中，如果我们需要默认的行为，那么可以通过在参数列表后面写上=default来要求
编译器生成默认构造函数。其中，=default既可以和声明一起出现在类的内部，也可以作为定义出现在类
的外部。和其他函数一样，如果=default在类的内部，则默认构造函数是内联的；如果在外部，则该成员
默认不是内联的。
注意：
	上面的默认构造函数之所以对Sales_data有效，是因为我们为内置类型的数据成员提供了初始值。
如果你的编译器不支持类内初始值，那么你的默认构造函数就应该使用构造函数初始列表来初始化类的每
个成员。

构造函数初始值列表

	接下来我们介绍类中定义的另外两个构造函数：
		Sales_data(const std::string &s):bookNo(s){}
Sales_data(const std::string &,unsigned n,double p):bookNo(s),units_sold(n),revenue(p*n){}
这两个定义中出现了新的部分，即冒号以及冒号和花括号之间的代码，其中花括号定义了（空的）函数体。
我们把新出现的部分称为构造函数初始列表，它负责为新创建的对象的一个或几个数据成员赋初值。构造函
数初始值是成员名字的一个列表，每个名字后面紧跟括号括起来的（或者在花括号内的）成员初始值。不
同成员的初始化通过逗号来分隔开来。
	有一点需要注意的是，在上面的两个构造函数体都是空的。这是因为这些构造函数的唯一目的就是
为数据成员赋初值，一旦没有其他任务需要执行，函数体也就空了。

在类的外部定义构造函数

	与其他几个构造函数不同，以istream为参数的构造函数需要执行一些实际的操作。在它的函数体内
调用了read函数以给数据成员赋以初值：
		Sales_data::Sales_data(std::istream &is)
		{
			read(is,*this);
		}
构造函数没有任何返回类型，所以上述定义从我们指定的函数名字开始。和其他成员函数一样，当我们在
类的外部定义构造函数时，必须指明该构造函数是哪个类的成员。因此，Sales_data::Sales_data的
含义是我们定义Sales_data类的成员，它的名字是Sales_data，又因为该成员的名字和类名相同，所以
它是一个构造函数。
	这个构造函数没有构造函数初始值列表，或者讲的更精确一点，它的构造函数初始值列表是空的，尽管
构造函数初始值列表是空的，但是由于执行了构造函数体，所以对象的成员依然能被初始化。
	没有出现在构造函数初始值列表中的成员将通过相应的类内初始值（如果存在的话）初始化，或者执行
默认初始化。对于Sales_data来说，这意味着一旦函数开始执行，则bookNo将被初始化成空string对象，
而units_sold和revenue将是0。

7.1.5拷贝、赋值和析构

	除了定义类的对象如何初始化之外，类还需要控制拷贝、赋值和销毁对象时发生的行为。对象在几种情
况下会被拷贝，如果我们初始化变量以及以值的方式传递或返回一个对象等。当我们使用了赋值运算符时发生
对象赋值的操作。当对象不再存在时执行销毁的操作，比如一个局部对象会在创建它的块结束时被销毁，当
vector对象（或数组）销毁时存储在其中的对象也会被销毁。
	如果我们不主动定义这些操作，则编译器将替代我们合成他们。一般来说，编译器生成的版本将对对
象的每个成员执行拷贝、赋值和销毁操作。

某些类不能依赖于合成的版本

	尽管编译器能替代我们合成拷贝、赋值和销毁的操作，但是必须要清楚的一点是，对于某些类来说，
合成的版本根本无法正常工作。特别是当要分配类对象之外的资源时，合成的版本常常会失效。不过值得
注意的是，很多需要动态内存的类能使用vector对象或者string对象管理必要的存储空间。使用vector
或者string的类能避免分配和释放内存带来的复杂性。

7.2	访问控制与封装

	到目前为止，我们已经为类定义了接口，但是并没有任何机制强制用户使用这些接口。我们的类还没有
封装，也就是说，用户可以直达Sales_data对象的内部，并且控制它的实现细节。在C++语言中，我们使用
访问说明符(access specifiers)加强类的封装性：
		>>>>定义在pulic说明符之后的成员在整个程序内可被访问，pulic成员定义的接口。
		>>>>定义在private说明符之后的成员可以被类的成员函数访问，但是不能被使用该
注意：
	这里说的，public被访问是指的可以被该类的对象访问！而private被访问到指的是只能被该
类的成员访问，类的对象并不是类的成员！！！
类的代码访问，private部分封装了（即隐藏了）类的实现细节。
再一次定义Sales_data类，其新形式如下所示：
		class Sales_data
		{
			public:
					Sales_data() = default;
					Sales_daata(const std::string &,unsigned n,double p):bookNo(s),units_sold(n),revenue(p*n){}
					Sales_data(const std::string &s):bookNo(s){}
					Sales_data(std::istream &);
					std::string isbn() const {return bookNo;}
					Sales_data &combine(const Sales_data&);
			private:
					double avg_price() const { return units_sold ? revenue/units_sold : 0;}
					std::string bookNo;
					unsigned units_sold = 0;
					double revenue = 0.0;
		};
作为接口的一部分，构造函数和部分成员函数（即isbn和combine)紧跟在public说明符之后：而数据成员
和作为实现部分的函数则跟在private说明符后面。
	一个类可以包含0个或多个访问说明符，而且对于某个访问说明符能出现多少次也没有严格限定。每个访问
说明符指定了接下来的成员的访问级别，其有效范围直到出现下一个访问说明符或者到达类的结尾为止。

使用class或者struct关键字

	在上面的定义中我们还做了一个微妙的变化，我们使用了class关键字而非是struct开始类的定义。这
种变化仅仅是形式上有所不同，实际上我们可以使用这两个关键字中的任何一个定义类。唯一的一点区别是
struct和class的默认访问权限不太一样。
	类可以在它的第一个访问说明符之前定义成员，对这种成员的访问权限依赖于类定义的方式。如果我
们使用struct关键字，则定义在第一个访问说明符之前的成员是public的；相反，如果我们使用
class关键字，则　这些成员都是private的。
	出于统一编程风格的考虑，当我们希望定义的类的所有成员是public的时，使用struct；反之，
如果希望成员是private的，使用class。
	所以，使用class和struct定义类唯一的区别就是默认的访问权限。

7.2.1	友元
	既然Sales_data的数据成员是private的，我们的read、print和add函数也就无法正常编译
了，这是因为尽管这几个函数是类的接口的一部分，但他们不是类的成员。类可以允许其他类或这函数访问
它的非公有成员，方法是令其他类或者函数成为它的友元(friend)。如果类想把一个函数作为它的友元，
只需要增加一条friend关键字开始的函数声明语句即可：
		class Sales_data
		{
			friend Sales_data_add(const Sales_data&,const Sales_data&);
			friend std::istream &read(std::istream,Sales_data&);
			friend std::ostream &print(std::ostream&,const Sales_data&);
			public:
				Sales_data() = default;
				Sales_data(const std::string &s,unsigned n,double p):bookNo(s),units_sold(n),revenue(p*n){}
				Sales_data(const std::string &):bookNo(s){}
				Sales_data(std::istream &);
				std::string isbn() const{return bookNo;}
				Sales_data &combine(const Sales_data&);
			private:
				std::string bookNo;
				unsigned units_sold = 0;
				double revenue = 0.0;
		};
		//Sales_data接口的非成员组成部分的声明
		Sales_data add(const Sales_data &,const Sales_data&);
		std::istream &read(std::istream&,Sales_data &);
		std::ostream &print(std::ostream&,const Sales_data&);
友元声明只能出现在类定义的内部，但是在类内出现的具体位置不限。友元不是类的成员也不受所在区域访问
控制级别的约束。一般来说，最好在定义开始或结束前的位置集中声明友元。

关键概念：封装的益处

	对封装有两个重要的优点：
			>>>确保用户代码不会无意间破坏对封装对象的状态。
			>>>被封装的类的具体实现细节可以随时改变，而无需调整用户级别的代码。
一旦把数据成员定义成private的，类的作者就可以比较自由的修改数据了。当实现部分改变时，我们只需要检
查类的代码本身以及确认这次改变有什么影响；换句话说，只要类的接口不变，用户代码就无须改变。如果数据是
public的，则所有使用了原来代数据成员的代码都可能失效，这时我们必须定位并重写所有依赖于旧版本实现的
代码，之后才能重新使用该程序。
	把数据成员的访问权限设成private还有另外一个好处，这么做能防止由于用户的原因造成数据被破坏。如
果我们发现有程序缺陷破坏了对象的状态，则可以在有限的范围内定位缺陷：因为只有实现部分的代码可能产生这
样的错误。因此，将查错限制在有限范围内将能极大的降低维护代码及修正程序错误的难度。

友元的声明

	友元的声明仅仅是指定了访问的权限，而非一个普通意义上的函数声明。如果我们希望类的用户能够调用某
个友元函数，那么我们就必须在友元声明之外再专门对函数进行一次声明。为了使友元对类的用户可见，我们通常
把友元的声明与类的本身放置在同一个头文件中（类的外部）。因此我们的Sales_data头文件应该与read、
print和add提供独立的声明（除了类内部的友元声明之外）。

7.3	类的其他特性
7.3.1	类成员再探

定义一个类型成员
	Screen表示显示器中的一个窗口。每个Screen包含一个用于保存Screen内容的string成员和三个
string::size_type类型的成员。他们分别表示光标的位置以及屏幕的高和宽。
	除了定义数据和函数成员之外，类还可以自定义某种类型在类中的别名。由类定义的类型名字和其他
成员一样存在访问限制，可以是public或者private中的一种。
		class Screen
		{
			public:
				typedef std::string::size_type pos;
			private:
				pos cursor = 0;
				pos height = 0,width = 0;
				std::string content;
		};
我们在Screen的public部分定义了pos，这样用户就可以使用这个　名字。Screen的用户不应该知道
Screen使用了一个string对象来存放它的数据。因此通过把pos定义成public成员可以隐藏Screen
实现的细节。
	关于pos的声明有两点需要注意。首先，我们使用了typedef，也可以等价的使用类型别名:
			using pos = std::string::size_type;
其次，用来定义类型的成员必须先定义后使用，这一点与普通成员有所区别，具体原因将在后边解释。因此
类型成员通常出现在类开始的地方。

Screen类的成员函数

	要使我们的类更加实用，还需要添加一个构造函数令用户能够定义屏幕的尺寸和内容，以及其他两个
成员，分别负责移动光标和读取给定位置的字符。
		class Screen
		{
			public:
				typedef std::string::size_type pos;
				Screen() = default;
				Screen(pos ht,pos wd,char c):height(ht),width(wd),contents(ht*wd,c){}
				char get() connst { return contents[cursor];}
				inline char get(pos ht,pos wd) const;
				Screen &move(pos r,pos c);
			private:
				pos cursor = 0;
				pos height = 0,width = 0;
				std::string contents;
		};

令成员作为内联函数

	在类中，常有一些规模较小的函数适合于被声明成内联函数。如我们之前所见的，定义在类内部成员函数是
自动inline的。因此Screen的构造函数和返回光标所指字符的get函数默认是inline函数。
	我们可以在类的内部把inline作为声明的一部分显示地声明成员函数，同样的，也能在类外部用inline关
键字修饰函数的定义。

重载成员函数

	和非成员函数一样，成员函数也可以被重载，只要函数之间在参数的数量和/或类型上有所区别就行。成员
函数的函数匹配过程与非成员函数非常类似。举个例子，我们的Screen类定义了两个版本的get函数，
一个版本返回光标当前位置的字符；另一个版本返回由行号和列号确定的位置的字符，编译器根据实参的数量
来决定运行哪个版本的函数：
		Screen myscreen;
		char ch = myscreen.get();	//调用Sccreen::get()
		ch = myscreen.get(0,0);		//调用Screen::get(pos,pos)

可变数据成员

	有时会发生这样一种情况，我们希望修改类的某个数据成员，即使是在一个const成员函数内，可以通过
在变量的声明中加入mutable关键字做到这一点。一个可变数据成员永远不会是const，即使它是cocnst对象
的成员。因此，一个const成员函数可以改变一个可变成员的值。举个例子，我们将给Screen添加一个名为
access_ctr的可变成员，通过它我们可以追踪每个Screen的成员函数
被调用了多少次。
	class Screen
	{
		public:
			void some_member()const;
		private:
			mutable size_t access_ctr;
	};
	void Screen::some_member()const
	{
		++access_ctr;	//即使是在const函数中，也可以修改mutable类型的成员。
注意：
	mutable类型的数据成员，我感觉主要是为了个const对象来使用的，因为const的成员对象是不可以修改
任何数据成员的。

数据成员的初始值

	在定义好Screen类之后，我们将继续定义一个窗口管理类并用它表示显示器上的一组Screen，这个类将包含
一个Screen类型的vector，每个元素表示一个特定的Screen。默认情况下，我们希望Window_mgr类开始时总是
拥有一个默认初始化的Screen。在C++11新标准中，最好的方式就是把这个默认值声明成一个类内初始值"
		class Window_mgr
		{
			private:
				std::vector<Screen> screens{Screen(24,80,' ')};
		};
当我们初始化类类型的成员时，需要为构造函数传递一个符合成员类型的实参。在此例中，我们使用一个单独的元素
值对vector成员执行了列表初始化，这个Screen的值被传递给vector<Screen>的构造函数，从而创建了一
个单元素的vector对象。具体地说，Screen的构造函数接受两个尺寸参数和一个字符值，创建了一个给定大小的
空白屏幕对象。
	如我们之前所知的，类内初始值必须使用=的初始化形式（初始化Screen的数据成员时所用的）或者花括号括起
来的直接初始化形式（初始化Screens所用的）。
注意：
		当我们提供一个类内初值时，必须以符号=或者花括号表示！！！！

7.3.2	返回*this的成员函数
	接下来我们继续添加一些函数，它们负责设置光标所在位置的字符或者其他任一给定位置的字符：
		class Screen
		{
			public:
				Screen &set(char);
				Screen &set(pos,pos,char);
		};
		inline Screen &Screen::set(char c)
		{
			contents[cursor] = c;	//设置当前光标所在位置的新值
			return *this;
		}
		inline Screen &Screen::set(pos r,pos col,char ch)
		{
			conntents[r*width + col] = ch;	//设置给定位置的新值。
			return *this;
		}
和move操作一样，我们的ser成员返回值是调用set对象的引用。返回引用的函数是左值的，意味着这些函数返回的
是对象本身而非对象的副本。如果我们把一系列这样的操作连接在一条表达式中的话:
		//把光标移动到一个指定的位置，然后设置该位置的字符值。
		myScreen.move(4,0).set('#');
这些操作将在同一个对象上执行。在上面的表达式中，我们首先移动myScreen内的光标，然后设置myScreen的
contents成员。也就是说，上述语句等价于:
		myScreen.move(4,0);
		myScreen.set('#');
如果我们令move和set返回Screen而非Screen&，则上述语句的行为将大不相同！

从const成员函数返回*this

	接下来，我们继续添加一个名为display的操作，它负责打印Screen的内容，我们希望这个函数能和move
以及set出现在同一序列中，因此类似于move和set,display函数也应该返回执行它的对象的引用。从逻辑上看，
显示一个Screen并不需要改变它的内容，因此我们令displaay为一个const成员，此时，this将是一个指向
const的指针而*this是const对象。由此推断，display的返回类型就应该是const Sales_data &。然
而如果真的令display返回一个const的引用，则不能把display嵌入到一组序列中去：
		Screen	myScreen;
		myScreen.display(cout).set('*');
即使myScreen是个非常量对象，对set的调用也无法通过编译。问题在于display的const版本返回的是常量
引用，而我们显然无权sett一个常量对象。因为常量对象只能调用常量成员函数！！

基于const的重载

	通过区分成员函数是否是const的，我们可以对其进行重载，其原因与我们之前根据指针参数是否指向const
而重载函数的原因差不多。具体说来，因为非常量版本的函数对于常量对象是不可用的。所以我们只能在一个常量
对象是调用const成员函数。另一方面，虽然可以在非常量对象上调用常量版本或非常量版本，但是显然此时非常量
版本是一个更好的匹配。
	在下面的这个例子中，我们将定义一个名为do_display的私有成员，由于它负责打印Screen的实际工作。
所有的display操作都将调用这个函数，然后返回执行操作的对象：
		class Screen
		{
			public:
				Screen &display(std::ostream &os)
				{	do_display(os);return *this}
				const Screen &display(std::ostream &s) const
				{	do_display(os);return *this}
			private:
				void do_display(std::ostream &os) const 
				{	os << contents;}
		};
和我们之前所学的一样，当一个成员调用另外一个成员时，this指针在其中隐式的传递。因此，当display调用
do_display时，它的this指针隐式的传递给do_display。而当display的非常量版本调用do_display时，
它的this指针将隐式的从指向非常量的指针转换成指向常量的指针。

建议：对公共代码使用私有功能函数
	有些读者可能会奇怪为什么我们要费力定义一个单独的do_display函数。毕竟，对do_display
的调用并不比do_display函数内部所做的操作简单多少。为什么还要这么做呢？实际上我们是出于以下原因的:
		>>>>一个基本的愿望是避免在多处使用同样的代码
		>>>>我们预测随着类的规模发展，display函数有可能变得更加复杂，此时，把相应的操作写在一处
而非两处的作用就比较明显了。
		>>>>我们很可能在开发过程中给do_display函数添加某些调试信息，而这些信息将在代码中去掉。
显然，只在do_display一处添加或删除这些信息更容易一些。
		>>>>这个额外的函数调用不会增加任何开销，因为我们在类内部定义了do_display，所以它隐式
地被声明成内联函数。这样的话，调用do_display就不会带来任何额外的运行时开销。
在实践中，设计良好的C++代码常常包含大量类似于display的小函数，通过调用这些函数，可以完成一组
其他函数的实际工作。

7.3.3	类类型

	每个类定义了唯一的类型，对于两个类来说，即使他们的成员完全一样，这两个类也是不同的类型。例如：
		struct First
		{
			int memi;
			int getMem();
		};
		struct Second
		{
			int memi;
			int getMem();
		};
	我们可以把类名作为类型的名字使用，从而直接指向类类型。或者，我们也可以把类名跟在关键字class或
struct后面:
		Sales_data item1;	//默认初始化Sales_data类型的对象
		class Sales_data item1;	//一条等价的声明
上面这两种使用类类型的方式是等价的，其中第二种方式从C语言中继承而来的，并且在C++语言中也是合法的。

类的声明

	就像可以把函数的声明和定义分离开来一样，我们也能仅仅声明类而暂时不定义它“
		class Screen;		//Screen类的声明
这种声明有时候被称作前向声明（forward declaration)，它向程序中引入了名字Screen并指明Screen是一
种类类型。对于类型Screen来说，在它声明之后定义之前是一个不完全类型，也就是说，此时，我们已知Screen是
一个类类型，但是不清楚它到底包含哪些成员。
	不完全类型只能在非常有限的情景下使用：可以定义指向这种类型的指针或引用，也可以声明（但是不能定义）
以不完全类型作为参数或者返回类型的函数。对于一个类来说，在我们创建它的对象之前该类型必须被定义过，而不能
仅仅被声明。否则，编译器就无法了解这样的对象需要多少存储空间。类似的，类也必须首先被定义，然后才能用引用
或者指针访问其成员。毕竟，如果尚未定义，编译器也就不能清楚该类到底有哪些成员。
	在7.6节中我们将描述一种例外的情况:直到类被定义之后数据长城源才能被声明成这种类类型。换句话说，我们
必须首先完成该类的定义，然后编译器才能知道存储该数据成员需要多少空间。因为只有当类全部完成类后类才算被定
义，所以一个类的成员类型不能是该自己。然而，一旦一个类的名字出现后，它就被认为是声明过了（但尚未定义），
因此类允许包含指向它自身类型的引用或指针:
		class Link_screen
		{
			Screen window;
			Link_screen *next;
			Link_screen *prev;
		};

注意：
	也就是说，在类没有完成定义之前，是不可以定义类的对象的！但是一旦一个类的名字出现后，就被认为是
被声明过了，所以可以定义指向它自身类型的指针或引用！！！

7.3.4	友元再探

	我们的Sales_data类把三个普通的非成员函数定义成了友元。类还可以把其他的类定义成友元。也可以把
其他类（之前已定义过的）的成员函数定义成友元。此外，友元函数能定义在类的内部，这样的函数是隐式内联的。

类之间的友元关系

	举个友元类的例子，我们用window_mgr类的某些成员可能需要访问它管理的Screen类的内部数据。例如，
假设我们需要为window_mgr添加一个名为clear的成员，它负责把一个指定的Screen的内容都设为空白。为了
完成这一任务，clear需要访问Screen的私有成员，而要想令这种访问合法，Screen需要把window_mgr指定
成它的友元：
		class Screen
		{
			friend class window_mgr;
			.....
		};
如果一个类指定了友元类，则友元类的成员函数可以访问此类包括非公有成员在内的所有成员。通过上面的声明，
window_mgr被指定为Screen的友元，因为我们可以将window_mgr的clear成员写成如下形式:
		class window_mgr
		{
			public:
				using ScreenIndex = std::vector<Screen>::size_type;
				void clear(ScreenIndex);
			private:
				std::vector<Screen> screens{Screen(24,80,' ' )};
		};
		void window_mgr::clear(ScreenIndex i)
		{
			Screen &s = screen[i];
			s.contents = string(s.height*s.width,' ' );
		}
一开始，首先把s定义成screens vector中第i个位置上的Screen的引用，随后利用Screen的height和
width成员计算出一个新的string对象，并令其含有若干个空白字符，最后我们把这个含有很多空白的字符
串赋给content成员。
	如果clear不是Screen的友元，上面的代码将无法通过编译，因为此时clear将不能访问Screen的height,
width和contents成员。而当Screen将window_mgr指定为其友元之后，Screen的所有成员对于window_mgr
就都变成可见的了。注意的是，如果某个类是另一个类的成员，那么包含此类的类，可以访问该类的公有成员，但是
不能访问私有成员。所以才需要引进friend！
	还有一点要注意，友元关系不存在传递性。也就是说，如果window_mgr有它自己的友元，则这些友元
并不能理所当然的具有访问Screen的特权！

令成员函数作为友元

	除了令整个window_mgr作为友元之外，Screen还可以只为clear提供访问权限。当把一个成员函数声明成友元
时，我们必须明确指出该成员函数属于哪个类：
		class Screen
		{
			friend void window_mgr::clear(ScreenIndex);
			//Screen类的剩余部分
		};
要想令某个成员函数作为友元，我们必须仔细组织程序的结构以满足声明和定义的彼此依赖关系。在这个例子中，我们
必须按照如下方式设计程序：
		>>>>首先定义window_mgr类，其中声明clear函数，但是不能定义它。在clear使用Screen的成员之前
必须先声明Screen。
		>>>>接下来定义Screen，包括对于clear的友元的声明
		>>>>最后定义clear，此时它才可以使用Screen的成员。

函数重载和友元

	尽管重载函数的名字相同，但是他们仍然是不同的函数。因此，如果一个类想把一组重载函数声明成它的友元，它需要
对这组函数中的每一个分别声明：
		//重载的storeOn函数
		extern std::ostream& storeOn(std::ostream &,Screen &);
		extern BitMap& storeOn(BitMap&,Screen &);
		class Screen
		{
			friend std::ostream& storeOn(std::ostream &,Screen &);
			//....
		};
Screen类把接受ostream&的stireOn函数声明成它的友元，但是接受BitMap&作为参数的版本仍然不能访问Screen。

友元声明和作用域

	类和非成员函数的声明不是必须在他们的友元声明之前。当一个名字第一次出现在一个友元声明中时，我们隐式的假定
该名字在当前作用域中是可见的。然而，友元本身不一定真的声明在当前作用域中。
	甚至就算在类的内部定义该函数，我们也必须在类的外部提供相应的声明从而使得该函数可见。换句话说，即使我们仅
仅是用声明友元的类的成员调用该友元函数，它也必须是被声明过的：
		struct X
		{
			friend void f() { /*友元函数可以定义在类的内部*/}
			X(){f();}
			void g();
			void h();
		};
		void X::g() { return f();}		//错误：f还没有被声明
		void f();				//声明那个定义在X中的函数
		void X::h() {return f();}		//正确：现在f的声明在作用域中了。
关于这段代码最重要的是理解友元声明的作用是影响访问权限，它本身并非普通意义上的声明。

7.4	类的作用域

	每个类都会定义它自己的作用域。在类的作用域之外，普通的数据和函数成员只能由对象、引用或指针使用成员
访问运算符来访问。对于类类型成员则使用运算符访问。不论哪种情况，跟在运算符之后的名字都必须是对应类的成
员:
		Screen::pos ht = 24,wd = 80;	//使用Screen定义的pos类型
		Screen scr(htt,wd,' ');			//定义一个类的对象
		Screen *p = &scr;
		char c = scr.get();				//访问scr对象的get成员
		c = p->get();					//访问p所指对象的get成员。

作用域和定义在类外部的成员

	一个类就是一个作用域的事实能够很好的解释为什么当我们在类的外部定义成员函数时必须同时提供类名和函数名。
在类的外部，成员的名字被隐藏起来了。一旦遇到了类名，定义的剩余部分就在类的作用域之内了，这里的剩余部分也
包括参数列表和函数体。结果就是，我们可以直接使用类的其他成员而无须再次授权了。
	例如，我们回顾一下window_mgr类的clear成员，该函数的参数用到了window_mgr类定义的一种类型:
		void window_mgr::clear(ScreenIndex i)
		{
			Screen &s = screens[i];
			s.ccontents = string(s.height * s.width,' ');
		}
因为编译器在处理参数列表之前已经明确了我们当前正位于window_mgr类的作用域中，所以不必再专门说明
ScreenIndex是window_mgr类定义的。出于同样的原因，编译器也能知道函数体中用到的screens也是
window_mgr类中定义的。
	另一方面，函数的返回类型通常出现在函数名之前。因此当成员函数定义在类的外部时，返回类型中使用的
名字都位于类的作用域之外。这时，返回类型必须指明它是哪个类的成员。例如，我们可能向window_mgr类
添加一个新的名为addScreen的函数。它负责向显示器添加一个新的屏幕。这个成员的返回类型将是
ScreenIndex,用户可以通过它定位到指定的Screen:
		class window_mgr
		{
			public:
				ScreenIndex addScreen(constt Screen&);
				//其他成员与之前的定义一样

		};
		window_mgr::ScreenIndex window_mgr::addScreen(const Screen &s)
		{
			screen.push_back(s);
			return screens.size() - 1;
		}
因为返回类型出现在类名之前，所以事实上它是位于window_mgr类的作用域之外的。在这种情况下，要想使用
ScreenIndex作为返回类型，我们必须明确指定哪个类定义了它。

7.4.1	名字查找与类的作用域
	在目前为止，我们编写的程序中，名字查找(寻找与所用名字最匹配的声明的过程）的过程比较直截了当:
		>>>>首先，在名字所在的块中寻找其声明语句，只考虑在名字的使用之前出现的声明。
		>>>>如果没有找到，继续查找外层作用域
		>>>>如果最终没有找到匹配的声明，则程序报错。
对于定义在类内部的成员函数来说，解析其中名字的方式与上述的查找规则有所区别，不过在当前的这个例子中体
现的不太明显。类的定义分两步处理：
		>>>>首先，编译成员的声明。
		>>>>直到类全部可见后才编译函数体。
注意：
	编译器处理完类中的全部声明后才会处理成员函数的定义!!!
按照这种两阶段的方式处理类可以简化类代
码的组织方式。因为成员函数直到整个类可见后才会被处理，所以它能使用类中定义的任何名字。相反，如果函数的
定义和成员的声明被同时处理，那么我们将不得不在成员函数中只使用那些已经出现的名字。

用于类成员声明的名字查找

	这种两阶段的处理方式只使用于成员函数中使用的名字。声明中使用的名字，包括返回类型或者参数列表中使用
的名字，都必须在使用前确保可见。如果某个成员的声明使用了类中尚未出现的名字，则编译器将会在定义该类的作
用域中继续查找。例如:
		typedef double Money;
		string bal;
		class Account
		{
			public:
				Money balance() { return bal;}
			private:
				Money bal;
		};
当编译器看到balance函数的声明语句时，它将在Account类的范围内寻找对Money的声明。编译器只考虑Account
中使用Money前出现的声明，因为没找到匹配的成员，所以编译器会接着到Account的外层作用域中查找。在这个例子
中，编译器会找到Money的typedef语句，该类型被用作balance函数的返回类型以及数据成员bal的类型。另一方面，
balance函数体在整个类可见后才被处理，因此该函数的return语句返回名为bal的成员，而非外层作用域的string对象。

类型名要特殊处理

	一般来说，内层作用域可以重新定义外层作用域中的名字，即使该名字已经在内层作用域中使用过。然而在类中，
如果成员使用了外层作用域中的某个名字，而该名字代表一种类型，则类不能在之后重新定义该名字：
		typedef double Monney;
		class Account
		{
			public:
				Money balance() {return bal;}	//使用外层作用域中的Money
			private:
				typedef double Money;	//错误，不能重新定义Money
				Money bal;
		};
需要特别注意的是，即使Account中定义的Money类型与外层作用域一致，上述的代码仍然是错误的！！！
	尽管重新定义类型名字是一种错误的行为，但是编译器并不为此负责，一些编译器仍将顺利通过这样的代码，
而忽略代码有错的事实。
类型定义通常出现在类的开始处，这样就能确保所有使用该类类型的成员都出现在类名的定义之后。

成员定义中的普通块作用域的名字查找

	成员函数中使用的名字按照如下方式解析：
		>>>>首先，在成员函数内查找该名字的声明。和前面一样，只有在函数使用之前出现的声明才被考虑。
		>>>>如果在成员成员函数内没有找到，则在类内继续查找，这时类的所有成员都可以被考虑。
		>>>>如果类内也没有找到该名字的声明，在成员函数定义之前的作用域内继续查找。
一般来说，不建议使用其他成员的名字作为某个成员函数的参数。不过为了更好的解释名字的解析过程，我们不妨在
dummy_fcn函数中暂时违反一下这个约定:
		//注意：这段代码仅为了说明而用，不是一段很好的代码
		//通常情况下不建议为参数和成员使用同样的名字
		int height;		//定义了一个名字，稍后将在Screen中使用
		class Scree
		{
			public:
				typedef std::string::size_type pos;
				void dummy_fcnn(pos height)
				{
					cursor = width * height;	//哪个height是那个参数！！
				};
			private:
				pos ccursor = 0;
				pos height = 0,width = 0;
		};
当编译器处理dummy_fcn中的乘法表达式时，它首先在函数作用域内查找表达式中用到的名字。函数的参数位于函数作用
域内，因此dummy_fcn函数体内用到的名字height指的是参数声明。
	在此例中，height参数隐藏了同名的成员。其实最好的确保我们使用height成员的方法是给参数起个其他名字:
			void Screen::dummy_fcn(pos ht)
			{
				cursor = width * height;	//成员height
			}

在文件中名字的出现处对其进行解析

	当成员定义在类的外部时，名字查找的第三步不仅要考虑定义之前的全局作用域中的声明，还需要考虑在成员函数
定义之前的全局作用域中的声明。例如：
		int height;
		class Screen
		{
			public:
				typedef std::string::size_type pos;
				void setHeight(pos);
				pos height = 0;	//隐藏了外层作用域中的heightt
		};
		Screen::pos verify(Screen::pos);
		void Screen::setHeight(pos var)
		{
			//var:参数
			//height:类的成员
			//verify:全局函数
			height = verify(var);
		}
请注意，全局　函数verify的声明在Screen类的定义之前是不可见的。然而，名字查找的第三步包括了成员函数之
前的全局作用域。在此例中，verify的声明位于setHeight的定义之前，因此可以被正常使用。
注意:
	类型名字在类内是不可以和类外层作用域中的类型名字重复的，但是变量却可以！！
	还有就是，为什么有的成员函数需要在类外定义，因为有可能这些成员函数会调用其他的函数，当这些函数没有
被定义的时候，需要在外部成员函数之前先声明才可以被使用！

7.5	构造函数再探

	对于任何C++的类来说，构造函数都是其中重要的组成部分。本节　将要对构造函数的一些其他功能进行深入的讨论。

7.5.1	构造函数初始列表

	当我们定义变量时习惯于立即对其进行初始化，而非先定义、再赋值：
		string foo = "Hello Wolrd";		//定义　并初始化
		string bar;					//默认初始化成空的sttring对象
		bar = "Hello World";		//为bar赋一个新值
就对象的数据成员而言，初始化和赋值也有类似的区别。如果没有在构造函数的初始值列表中显示地初始化成员，则该成员
将在构造函数体之前执行默认初始化。例如:
		Sales_data::Sales_data(const string &s,unsigned cnt,double price)
		{
			bookNo = s;
			units_sold = cnt;
			revenue = cnt　* price;
		}
这段代码和我们之前定义的效果是相同的：当构造函数完成后，数据成员的值相同。区别是原先版本初始化了它的数据成员，
而这个版本是对数据成员执行了赋值操作。这一区别到底会有什么深层次的影响完全依赖于数据成员的类型。

构造函数的初值有时必不可少

	有时我们需要忽略掉数据成员初始化和赋值之间的差异，但并非总这样。如果成员是const或者是引用的话，必须将其
初始化。类似的，当成员属于某种类类型且该类型没有定义默认构造函数时，也必须将这个成员初始化。例如:
		class ConstRef
		{
			public:
				ConstRef(int ii);
			privaete:
				int i;
				const int ci;
				int &ri;
		};
和其他常量对象或者引用一样，成员ci和ri都必须被初始化。因此，如果我们没有为它们提供构造函数初始值的话将引发
错误：
		//错误：ci和ri必须被初始化
		ConstRef::ConstRef(int ii)
		{
			i = ii;		//正确，
			ci  = ii;	//错误，不能给const赋值
			ri = i;		//错误:ri没有被初始化
		}
随着构造函数体一开始执行，初始化就完成了。我们初始化const或者引用类型的数据成员的唯一机会就是通过构造函数
初始值，因此该构造函数的正确形式应该是:
			ConstRef::ConstRef(int ii): i(ii),ci(ii),ri(ii){}
小结：
	构造函数的初始值列表和赋值的方法是有区别的:
		列表初始化是真正的初始化，而在括号里边的是赋值！！！
所以建议使用构造函数初始值。在很多类中，初始化和赋值的区别事关底层效率问题提提：前者直接初始化数据成员，而
后者则先默认！！初始化然后接着赋值。
	除了效率问题外更为重要的是，一些数据成员必须要初始化。建议读者养成使用构造函数初始值的习惯，这样避免某
些意想不到的编译错误，特别是遇到有的类含有需要构造函数初始值的成员时。

成员初始化的顺序

	显然，在构造函数初始值中每个成员只能出现一次。否则，给同一个成员赋两个不同的初始值有什么意义呢？不过让
人稍感意外的是，构造函数初始值列表只说明用于初始化成员的值，而不限定初始化的具体执行顺序。成员的初始化顺序
与他们在类定义中出现的顺序一致：第一个成员先被初始化，然后第二个，以此类推。构造函数初始值列表中初始值的
前后位置关系不会影响实际的初始化顺序。
	一般来说，初始化的顺序没什么特别要求。不过如果一个成员是用另一个成员来初始化的，那么这两个初始化顺序就
很关键了。举个例子，考虑下面这个类:
		class X
		{
			int i,j;
			public:
				X(int val):j(val),i(j){}
		};
在此例中，从构造函数初始值的形式上看仿佛是先用val初始化了j,然后再用j初始化i。实际上，i先被初始化，因此这个
初始值的效果是试图使用未定义的值j初始化i!有的编译器具备一项比较友好的功能，即当构造函数初始值列表中的数据成
员顺序与这些成员声明的顺序不符时会产生一条警告消息。

默认实参和构造函数

	Sales_data默认构造函数的行为与只接受一个string实参的构造函数差不多。唯一的区别是接受string实参的构造
函数使用这个实参初始化bookNo,而默认构造函数（隐式）使用string的默认构造函数初始化bookNo。我们可以把它们重
写成一个使用默认实参的构造函数:
		class Sales_data
		{
			public:
				Sales_data(std::string s = " "):bookNo(s){}
				Sales_data(std::string s,unsigned cnt,double rev):bookNo(s),units_sold(cn),revenue(rev*cnt){}
				Sales_data(std::istream &is){read(is,*this);}
		};

7.5.2	委托构造函数

	C++11新标准扩展了构造函数初始值的功能，使得我们可以定义所谓的委托构造函数。一个委托构造函数使用它所属类
的其他构造函数执行它自己的初始化过程，或者说它把它自己的一些（或者全部）职责委托给了其他构造函数。
	和其他构造函数一样，一个委托构造函数也有一个成员初始值的列表和一个函数体。在委托构造函数内，成员初始值列
表只有一个唯一的入口，就是类名本身。和其他成员初始值一样，类后面紧跟圆括号括起来的参数列表，参数列表必须与类
中另外一个构造函数匹配。举个例子:
		class Sales_data
		{
			public:
				Sales_data(std::string s,unsigned cnt,double price):bookNo(s),units_sold(cnt),revenue(cnt*price){}
				Sales_data():Sales_data(" ",0,0){}
				Sales_data(std::string s):Sales_data(s,0,0){}
				Sales_data(std::istream &is):Sales_data() {read(is,*this);}
		};
在这个Sales_data类中，除了一个构造函数外其他的都委托了它们的工作。第一个构造函数接受三个实参，使用这些实参
初始化数据成员，然后结束工作。我们定义的默认构造函数令其使用三参数的构造函数完成初始化过程，它也无须执行其他
任务，这一点从空的构造函数能看的出来。接受一个string的构造函数同样委托给了三参数的版本。
	接受istream&的构造函数也是委托构造函数，它委托给了默认构造函数，默认构造函数又接着委托给三参数构造函数。
当这些受委托的构造函数执行完成以后，接着执行istream构造函数体的内容。它的构造函数体调用read函数读取给定的
istream。
	当一个构造函数委托给另一个构造函数时，受委托的构造函数的初始值列表和函数体被依次执行。在Sales_data类中，
受委托的构造函数体恰好是空的。假如函数体包含有代码的话，将先执行这些代码，然后控制权才会交换给委托者的函数体。

7.5.3	默认构造函数的作用

	当对象被默认初始化或值初始化时自动执行默认够赞函数。默认初始化在一下情况下发送:
		>>>>当我们在块作用域内不使用任何初始值定义一个非静态变量或者数组时。
		>>>>当一个类本身含有类类型的成员且使用合成的默认构造函数时
		>>>>当类类型的成员没有在构造函数初始值列表中显示地初始化时。
值初始化在以下情况下发生:
		>>>>在数组初始化的过程中如果我们提供的初始值数量少于数组的大小时。
		>>>>当我们不使用初始值定义一个局部静态变量时
		>>>>当我们通过书写形如T()的表达式显示地请求值初始化时，其中T是类型名（vector的一个构造函数只
接受一个实参用于说明vector大小），它就是使用一个这种形式的实参来对它们的元素初始化器进行初始值初始化。
类必须包含一个默认构造函数以便在上述情况下使用，其中的大多数情况非常容易判断。不那么明显的一种情况是类的
某些数据成员缺少默认构造函数:
		class NoDefault
		{
			public:
				NoDefault(const std::string &);
				//还有其他成员，但是没有其他构造函数了
		};
		struct A
		{
			NoDefault my_mem;
		}
		A a;	//错误：不能为A合成构造函数
		struct B
		{
			B(){}	
			NoDefault b_member;//错误，b_member没有初始值
		};
在实际中，如果定义了其他构造函数，那么最好也提供一个默认的构造函数！！！

使用默认构造函数

	下面的obj的声明可以正常编译通过:
		Sales_data obj();		//正确：定义了一个函数而非对象
		if(obj.isbn() == Primer_5th_ed.isbn());	//错误：obj是一个函数
如果我们想定义一个使用默认构造函数进行初始化的对象，正确的方法是去掉对象名之后的空括号对：
		Sales_data obj;//obj是个默认的初始化的对象！

7.5.4	隐式的类类型转换

	我们可以为类定义隐式转换规则。如果构造函数只接受一个实参，则它实际上定义了转换为此类型的隐式转换机
制，有时我们把这种构造函数称作转换构造函数。
	在Sales_datta类中，接受string的构造函数和接受istream的构造函数分别定义了从这两种类型向
Sales_data隐式转换的规则。也就是说，在需要使用Sales_data的地方，我们可以使用string或者istream作为
替代：
		string null_book = "9-999-9999-9";
		//构造一个临时的Sales_data对象
		//该对象的units_sold和revenue等于0，bookNo等于null_book;
		item.combine(null_book);
在这里我们使用一个string实参调用了Sales_data的combine成员，该调用是合法的，编译器用给定的string自动
创建了一个Sales_data对象。新生成的这个临时Sales_data对象传递给combine，因为combine的参数是一个常量
引用，所以我们可以该参数传递一个临时量。

只允许一步类类型转换

	编译器只会自动执行一步类型转换，例如，因为下面的代码隐式地使用了两种转换规则，所以它是错误的:
		//错误:需要用户定义的两种转换
		//(1)把"9-999-9999-9"转换成string
		//(2)再把这个（临时的)string转换成Sales_data
		item.combine("9-999-9999-9");
如果我们想完成上述调用，可以显示地把字符串转换成string或者Sales_data对象：
		//正确：显示地转换成string，隐式地转换成Sales_data
		item.combine(string("9-999-9999-9");
		//正确，隐式的转换成string,显示地转换成Sales_data
		item.combine(Sales_data("9-999-9999-9"));
注意，首先是"9-999-9999-9"转换成string对象，然后才构造成Sales_data对象的!

类类型转换不总是有效

	是否需要从string到Sales_data的转换依赖于我们对用户使用该转换的看法。在此例中，这种转换可能是对的。
null_book中的string肯能表示了一个不存在的ISBN编号。另一个是从istream到Sales_data的转换。
		//使用istream构造函数创建一个函数传递给combine
		item.combine(cin);
这段代码隐式地把cin转换成Sales_data，这个转换执行了一个istream的Sales_data构造函数，该构造函数
通过读取标准输入创建了一个临时的Sales_data对象，随后将得到的对象传递给combine。
	Sales_data对象是个临时变量，一旦combine完成我们就不能再访问它了。实际上，我们构建了一个对象，先将
它的值加到item中，随后将其丢弃。

抑制构造函数定义的隐式转换

	在要求隐式转换的程序上下文中，我们可以通过将构造函数声明为explicit加以阻止：
		class Sales_data
		{
			public:
				Sales_data() = default;
				Sales_data(const std::string &s,unsigned n,double p):bookNo(s),units_sold(n),revenu(p * n){}
				explicit Sales_data(const std::string &s):bookNo(s){}
				explicit Sales_data(std::istream&);
		};
此时，没有任何构造函数能用于隐式地创建Sales_data对象，之前的两种用法都无法通过编译：
		item.combine(null_book);	//错误:string构造函数是explicit的
		item.combine(cin);			//错误:istream构造函数是explicit的
关键字explicit只对一个实参的构造函数有效。需要多个实参的构造函数不能使用于执行隐式转换，所以无须将这些构造
函数定义成explicit的。只能在类内声明构造函数时使用explicit关键字，在类外部定义时不应该重复:
		//错误，explicit关键字只允许出现在类的构造函数中！！
		explicitt Sales_data::Sales_data(istream &is)
		{
			read(is,*this);
		};

为转换显示地使用构造函数

	尽管编译器不会将explicit的构造函数用于隐式转换过程，但是我们可以使用这样的构造函数显示地强制进行转换
		//正确，实参是一个显示构造的Sales_data对象
		item.combine(Sales_data(null_book));
		//正确:static_cast可以使用explicit的构造函数
		item.combine(static_cast<Sales_data>(cin));
第二个调用中，我们使用static_cast执行了显示的而非隐式转换。其中，static_cast使用istream构造函数创建
了一个临时的Sales_data对象。

7.5.5	聚合类

	聚合类使得用户可以直接访问其成员，并且具有特殊的初始化语法形式。当一个类满足如下条件时，我们说它
是聚合的:
		>>>>所有成员都是public
		>>>>没有定义任何构造函数
		>>>>没有类内初始值
		>>>>没有基类，也没有virtual函数，关于这部分我们将在15章详细介绍。
其中类内初始值其实就是直接在类内给初始化的变量，没有经过构造函数初始化的。
		struct myclass
		{
			int member = 10;	//member就是类内初始值
			double num = 100.0;	//num就是类内初始值
		};
例如下面的类是一个聚合类:
		struct Data
		{
			int val;
			string s;
		};//struct默认的类型是public,class默认的是private
我们可以提供一个花括号括起来的成员初始值列表，并用它初始化聚合类的数据成员:
		//val1.val = 0;val1.s = string("Anna");
		Data val1 = {0,"Anna"};
初始值的顺序必须与声明的顺序一致，也就是说，第一个成员的初始值要放在第一个，然后是第二个，依次类推。下面的
例子是错误的：
		Data val2 = {"Anna",0};
与初始化数组元素的规则一样，如果初始值列表中的元素个数少于类的成员数量，则靠后的成员被值初始化。初始值列表
的元素个数绝对不能多于类的成员数量。值得注意的是，显示的初始化类的对象的成员存在三个明显的缺点:
		>>>>要求类的所有成员都是public的
		>>>>将正确初始化每个对象的每个成员的重任交给了类的用户。因为用户很容易忘掉某个初始值，或者
提供一个不恰当的初始值，所以这样的初始化过程冗长乏味且容易出错。
		>>>>删除或添加一个成员之后，所有的初始化语句都需要更新。

7.5.6	字面值常量类

	在前面我们提到过constexpr函数的参数和返回类值必须是字面值类型。除了算术类型、引用和指针外，某些
类也是字面值类型。和其他类不同，字面值类型的类可能含有constexpr函数成员。这样的成员必须符合
constexpr函数的所有要求，他们是隐式的const的。数据成员都是字面值类型的聚合类是字面值常量类。如果一个
类不是聚合类，但它符合下述的要求，则它也是一个字面值常量类：
		>>>>数据成员都必须是字面值类型
		>>>>类必须至少含有一个constexpr构造函数。
		>>>>如果一个数据成员含有类内初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员
属于某种类类型，则初始值必须使用成员自己的constexpr构造函数
		>>>>类必须使用析构函数的默认定义，该成员负责销毁类的对象。

constexpr构造函数

	尽管构造函数不能是const的，但是字面值常量类的构造函数可以是constexpr函数。事实上，一个字面值常量
类必须至少提供一个constexpr构造函数。这里回忆一下什么是constexpr函数:
		返回类型是字面值类型，并且形参也必须是字面值类型；并且函数体内有且仅有一条return语句!
	constexpr构造函数可以声明成=default的形式。否则，constexpr构造函数就必须既符合构
造函数的要求（意味着不能有返回语句），又符合constexpr函数的要求（意味着它能拥有的唯一可以执行
的语句就是返回语句）。综合这两点可以知道，constexpr构造函数体一般来说应该是空的。我们通过前置
关键字constexpr就可以声明一个constexpr构造函数了：
		class Debug
		{
			public:
				constexpr Debug(bool b = true):hw(b),io(b),other(b){}
				constexpr Debug(bool h,bool i,bool o):hw(h),io(i),other(o){}
				constexpr bool any(){return hw || io || other;}
				void set_io(bool b){io = b;}
				void set_hw(bool b){hw = b;}
				void set_other(bool b){hw = b;}
			private:
				bool hw,io,other;//
				//hw 硬件错误，IO错误，other其他错误。
constexpr构造函数必须初始化是所有的数据成员！！！初始值或者使用constexpr构造函数，或者是一条常量表达式。
	constexpr构造函数用于生成constexpr对象以及constexpr函数的参数或返回类型:
		constexpr Debug io_sub(false,true,false);//调试IO
		if(io_sub.any())
			cerr << "print appropriate error messages"<<endl;
		constexpr Debug prod(false);

7.6		类的静态成员

	有的时候类需要它的一些成员与类本身直接相关，而不是与类的各个对象保持联系。例如，一个银行账户类可能需要
一个数据成员来表示当前的基准利率。在此理中，我们希望利率与类关联，而非与类的每个对象关联。从实现效率的角度
来看，没必要每个对象都存有利率信息。而且更加重要的是，一旦利率浮动，我们希望所有的对象都能使用新值。

声明静态成员

	我们通过在成员声明之前加上关键字static使得其与类关联在一起。和其他成员一样，静态成员可以是public
或者private的。静态数据成员的类型可以是常量、引用、指针、类类型等。
	举个例子，我们定义一个类，用它表示银行的账户记录:
		class Account
		{
			public:
				void calculate(){amount += amount * interestRate}
				static double rate(){return interestRate;}
				static void rate(double);
			private:
				std::string owner;
				double amount;
				static double interestRate;
				static double initRate();
		};
类的静态成员存在于任何对象之外，对象不包括任何与静态数据成员有关的数据。因此，每个Account对象将包含两
个数据成员:owner和amount。只存在一个interestRate对象而且它被所有Account对象共享。类似的，静态成员
函数也不与任何对象绑定在一起，它们不包含this指针。作为结果，静态成员函数不能声明成const的，而且我们也
不能在static函数体内使用this指针。这一限制既适用于this显示使用，也对调用非静态成员的隐式使用有效。

使用类的静态成员

	我们使用作用域运算符直接访问静态成员:
		double r;
		r = Account::rate();	//使用作用域运算符访问静态成员。
虽然静态成员不属于类的某个对象，但是我们仍然可以使用类的对象、引用或者指针来访问静态成员:
		Account ac1;
		Account *ac2 = &ac1;
		//调用静态成员函数rate的等价形式
		r = ac1.rate();	//通过Account的对象或引用
		r = ac2->rate();//通过指向Account对象的指针
成员函数不用通过作用域运算符就能直接使用静态成员:
		class Account
		{
			public:
				void calculate(){amount += amount * inerestRate;}
			private:
				static double interestRate;
		};
小结：
	静态成员是类所拥有的，外界想获取的话，可以使用类的访问符来访问，或者可以通过类的对象访问。并且
类的成员函数可以直接访问。静态成员不能被使用const，并且静态成员函数不包含this，而且也不能使用this！

定义静态成员

	和其他的成员函数一样，我们既可以在类的内部也可以在类的外部定义静态成员函数。当在类的外部定义静态
成员时，不能重复static关键字，该关键字只能！！出现在类内部声明语句:
		void Account::rate(double newRate)
		{
			interestRate = newRate;
		}
和类的所有成员一样，当我们指向类外部的静态成员时，必须明确指明成员所属的类名。static关键字则只出现在
类内部声明语句中。
	因为静态数据成员不属于类的任何一个对象，所以它们并不是在创建类的对象时被定义的。这意味着它们不是由
类的构造函数初始化的。而且一般来说，我们不能在类的内部初始化静态数据成员。相反的，必须在类的外部定义和
初始化每个静态成员。和其他对象一样，一个静态数据成员只能定义一次。（注意，这只是对于静态数据成员的！！！）
	类似于全局变量，静态数据成员定义在任何函数之外。因此一旦它被定义，就将一直存在于程序的整个声明周期中。
我们定义静态数据成员的方式和在类的外部定义成员函数差不多。我们需要指定对象的类型名，然后是类名、作用域运
算符以及成员自己的名字:
		//定义并初始化一个静态成员
		double Account::interestRate = initRate();
这条语句定义了名为interestRate的对象，该对象是类Account的静态成员，其类型是double。从类名开始，这条
定义语句的剩余部分就位于类的作用域之内了。因此，我们可以直接使用initRate函数。注意，虽然initRata是
私有的，我们也能用它初始化interestRate。和其他成员的定义一样，interestRate的定义也可以访问类的
私有成员。
注意：
	要想确保对象只定义以，最好的办法就是把静态数据成员的定义与其他非内联函数的定义放在同一个文件中。

静态成员的类内初始化

	通常情况下，类的静态成员不应该在类的内部初始化。然而，我们可以为静态成员提供const整数类型的类内
初始值，不过要求静态成员必须是字面值常量类型的constexpr。初始值必须是常量表达式，因为这些成员本身就
是常量表达式，所以他们能用在所有适合于常量表达式的地方。例如，我们可以用一个初始化了的静态数据成员指
定数组成员的维度:
		class Account
		{
			public:
				static double rate(){ return interestRate;}
				static void rate(double);
			private:
				static constexpr int period = 20;	//period是常量表达式
				double daliy_tbl[period];
		};
如果某个静态成员的应用场景仅限于编译器可以替换它的值的情况，则一个初始化的const或constexpr　static
不需要分别定义。相反，如果我们将它用于值不能替换的场景中，则该成员必须有一条定义语句。
	例如，如果period的唯一用途就是定义daliy_tbl的维度，则不需要在Account外面再专门定义period。
此时，如果我们忽略了这条定义，那么对程序非常微小的改动可能造成编译错误，因为程序找不到该成员的定义
语句。举个例子，当我们需要把Account::period传递给一个接受const int&的函数时，必须定义period。
	如果在类的内部提供了一个初始值，则成员的定义不能在指定一个初始值了:
		//一个不带初始值的静态成员的定义
		constexpr int Account::period;	//初始值在类内提供！
即使一个常量静态数据成员在类内部被初始化了，通常情况下也应该在类的外部定义一下该成员！！！

静态成员能用于某些场景，而普通成员不能

	如我们所见，静态成员独立于任何对象。因此，在某些非静态数据成员可能非法的场合，静态成员却可以正常使用。
举个例子，静态数据成员可以是不完全类型。特别的，静态数据成员的类型可以就是它所属的类类型。而非静态数据成
员受到限制。只能声明成它所属类的指针或引用。
		class Bar
		{
			public:
				//......
			private:
				static Bar meml;	//正确:静态成员可以是不完全类型
				Bar *mem2;			//正确:指针成员可以是不完全类型
				Bar mem3;			//错误:数据长城源必须是完全类型！！！
		};
静态成员和普通成员的另外一个区别就是我们可以使用静态成员作为默认实参:
		class Screen
		{
			public:
				//bkground 表示一个在类中稍后定义的静态成员
				Screen& clear(char = bkground);
			private:
				static const char bkground;
		};
非静态数据成员不能作为默认实参，因为它的值本身属于对象的一部分，这么做的结果是无法真正提供一个对象
以便从中获取成员的值，最终将引发错误。

