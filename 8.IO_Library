										IO库
内容
--------------------------------
	8.1 IO类
	8.2	文件输入书输出
	8.3	String流
--------------------------------
	C++语言不直接处理输入输出，而是通过一族定义在标准库中的类型来处理IO。这些类型还支持从设备读取数据，
向设备写入数据的IO操作，设备可以是文件、控制台窗口等。还有一些类型允许内存IO，即,从string读取数据，向
string写入数据。
	IO库定义了读写内置类型的操作，此外一些类，如string，通常也会定义类似的IO操作，来读写自己的对象。
本章将要介绍IO库的基本内容。后续章节会介绍更多IO库的功能:第14章将会介绍如何编写自己的输入输出运算符。
第17章将会介绍如何控制输出格式以及如何对文件进行随机访问。我们的程序已经使用了很多IO库设施了:
		>>>>istream(输入流)类型，提供输入操作
		>>>>ostream(输出流)类型，提供输出操作
		>>>>cin,一个istream对象，从标准输入读取数据
		>>>>cout,一个ostream对象，向标准输出写入数据
		>>>>cerr,一个ostream对象，通常用于输出程序错误消息，写入到标准错误。
		>>>>:>>运算符，用来从一个istream对象读取输入数据
		>>>>:<<运算符，用来向一个ostream对象写入输出数据
		>>>>:getline函数，从一个给定的istream读取一行数据，存入一个给定的string对象中。

8.1	IO类

	到目前为止，我们已经使用过的IO类型和对象都是操作char数据的。默认情况下，这些对象都是关联到用户的控制
窗口的。当然，我们不能限定实际应用程序仅从控制台窗口进行IO操作，应用程序常常需要读写命名文件。而且，使用
IO操作处理string中的字符会很方便。此外，应用程序还能读写需要宽字符支持的语言。为了支持这些不同种类的IO处
理操作,在istream和ostream之外，标准库还定义了其他一些IO类型，我们之前已经使用过了。下表列出了这些类型
，分别定义在三个独立的头文件中:iostream定义了用于读写流的基本类型，fstream定义了读写命名文件的类型，
sstream定义了读写内存string对象的类型。
	
		头文件				类型
	  iostream			istream,wistream从流读取数据
						ostream,wostream向流写入程序
						iostream,wiostream读写流

	　　 fstream			ifstream,wifstream从文件读取数据
						ofstream,wofstream向文件写入数据
						fstream,wfstream读写文件

	   sstream			istringstream,wistringstream从string读取数据
						ostringstream,wostringstream向string写入数据
						stringstream,wstringstream读写string

	为了支持使用宽字符的语言，标准库定义了一组类型和对象来操作wchar_t类型的数据。宽字符版本的类型和
函数的名字以一个w开始。例如wcin,wcout和wcerr分别对应cin、cout和cerr的宽字符版对象。宽字符版本
的类型和对象与其对应的普通char版本的类型定义在同一个头文件中。例如，头文件fstream定义了ifstream和wfstream类型

IO类型间的关系

	概念上，设备类型和字符大小都不会影响我们要执行的IO操作。例如，我们介意用>>读取数据，而不用管是从
一个控制台窗口，一个磁盘文件还是一个string对象读取。类似得，我们也不用管读取的字符能存入一个char对象内，
还是需要一个wchar_t对象来存储。标准库使我们能忽略这些不同类型的流之间的差异，这是通过继承机制实现的，
利用模板，我们介意使用具有继承关系的类，而不必了解继承机制如何工作的细节。我们将在15章和18.3节介绍C++
是如何支持继承机制的。
	简单来说，继承机制使我们可以声明一个特定的类继承自另一个类。我们通常可以将一个派生类(继承类）对象
当做其基类（所继承的类）对象来使用。类型ifstream和istringstream都继承自istream。因
此，我们可以像使用istream对象一样来使用ifstream和istringstream对象。也就是说，我们
是如何使用cin的，就可以同样地使用这些类型的对象。例如，可以对一个ifstream或istringstream对象调用
getline，也可以使用>>从一个ifstream或istringstream对象中读取数据。类似的，类型ofstream和
ostringstream都继承自ostream。因此，我们是如何使用cout的，就可以同样的使用这些类型的对象。

8.1.1	IO对象无拷贝赋值

	我们不能拷贝或对IO对象赋值:
		ofstream out1,out2;
		out1 = out2;		//错误:不能对流对象赋值
		ofstream print(ofstream);	//不能初始化ofstream参数
		out2 = print(out2);		//错误:不能拷贝流对象,因为实参是用拷贝的方式给形参赋值的。
由于不能拷贝IO对象，因此我们也不能将形参或返回类型设置为流类型，（因为返回类型也是通过拷贝的方式返
回值的）。进行IO操作的函数通常以引用方式传递和返回流。读写一个IO对象会改变其状态，因此传递和返回的
引用不能是const（这个看你自己的需求，也不一定就是必须不能是const类型的）。

8.1.2	条件状态

	IO操作一个与生俱来的为是可能发生错误。一些错误是可恢复的，而其他错误则发生在系统深处，已经超出
了应用程序可以修正的范围。表8.2列出了IO类所定义的一些函数和标志，可以帮助我们访问和操纵流的条件状态

		strm::iostate		strm是一种IO类型，在上面中已经列出了所有
							的IO类型。iostate是一种机器相关的类型，
							提供了表达条件状态的完整功能

		strm::badbit		strm::badbitt用来指出流已崩溃
		strm::failbit		strm::failbit用来指出一个IO操作失败了
		strm::eofbit		strm::eofbit用来指出流到达了文件结束
		strm::goodbit		strm::goodbit用来指出流处于错误状态，此
							值保证为零
		s.eof()				若流s的eofbit置位，则返回true
		s.fail()			若流s的failbit或badbit置位，返回true
		s.bad()				若流s的badbitt置位，则返回true
		s.good()			若流s处于有效状态，返回true
		s.clear()			将流s中所有条件状态位复位，将流的状态设置为
							有效。返回void
		s.clear(flags)		根据给定的flags标志位，将流s中对应条件状态
							复位，flags的类型为strm::iostate，
							返回void
		s.setstatte(flags)	根据给定的flags标志位，将流s中对应状态位置
							位，flags的类型为strm::iostate。返回void
		s.rdstate()			返回流s的当前条件状态，返回值类型为strm::iostate

下面是一个IO错误的例子:
		int val;
		cin >> ival;
如果我们在标准输入上键入Boo,读取操作就会失败。代码中的输入运算符期待读取一个int，但却得到了一个字符
B。这样，cin就会进入错误状态。类似的，如果我们输入一个文件结束标识，cin也会进入错误状态。
	一个流一旦发生错误，其上后续的IO操作都会失败。只有当一个流处于无错状态时，我们才可以从它读取数
据，向它写入数据。由于流可能处于错误状态，因此代码通常应该在使用一个流之前先检查它是否处于良好状态。
确定一个流对象的状态的最简单的方法是将它作为一个条件来使用:
		while(cin>>word)
			//	ok:读取操作成功
whil循环检查>>表达式返回流的状态。如果输入操作成功，流保持有效状态。则条件为真。

查询流的状态

	将流作为条件使用，只能告诉我们流是否有效，而无法告诉我们具体发生了什么。有时我们也需要知道流为什么
会失败。例如，在键入文件结束标识之后我们的对应措施，可能与遇到一个IO设备错误的处理方式是不同的。
	IO库定义了一个与机器无关的iostate类型，它提供了表达流状态的完整功能。这个类型应作为一个位集合来
使用。IO库定义了4个iostate类型的constexpr值。表示特定的位模式。这些值用来表示特定类型的IO条件，可
以与位运算符一起使用来一次性检测或设置多个标志位。
	badbit表示系统级错误，如不可恢复的读写错误。通常情况下，一旦badbit被置位，流就无法再使用了。在
发生可恢复错误后，failbit被置位，如期望读取数值却读出一个字符的错误。这种问题通常是可以修正的。流还可
以继续使用。如果到达文件的结束位置，eofbit和failbit都会被置位。goodbit的值为0，表示流未发生错误。
如果badbitt、failbit和eofbit任一个被置位，则检测流状态的条件会失败。
	标准库还定义了一组函数来查询这些标志位的状态。操作good在所有的错误位均未置位的情况下返回true，
而bad、fail和eof则在对应错误位被置位时返回true。此外，在badbit被置位时，fail也会返回true。
这意味这，使用good或fail是确定流的总体状态的正确方法。实际上，我们将流当做条件使用的代码就等价于!
fail()。而eof和bad操作只能表示特定的错误。

管理条件状态

	流对象的rdsate成员返回一个iostate值，对应流的当前状态。setstate操作将给定条件位置位，表示
当前发生了对应的错误。clear成员是一个重载的成员：它有一个不接受参数的版本，而另一个版本接受iostate
类型的参数。
	clear不接受参数的版本请清除（复位）所有错误标志位。执行clear()后，调用good会返回true。
我们可以这样使用这些成员:
		//记住cin的当前状态
		auto old_state = cin.rdstate();	//记住cin当前状态
		cin.clear();		//使得cin有效
		process_input(cin);	//使用cin
		cin.setstate(old_state);	//将cin置位为原有状态
带参数的clear版本接受一个iostate值，表示流的新状态。为了复位单一的条件状态位，我们首先使用rdstate
读出当前条件状态，然后用位操作将所需位复位来生成新的状态。例如下面的代码将failbit和badbit复位，但
保持eofbit不变:
		//复位failbit和badbit，保持其他标志位不变
		cin.clear(cin.rdstate() & ~cin.failbit & ~cin.badbit);

8.1.3	管理输出缓冲

	每个输出流都管理一个缓冲区，用来保存程序读写的数据。例如，如果执行下面的代码:
		os << "please enter a value:";
文本串可能立即打印出来，但是也有可能被操作系统保存在缓冲区中，随后再打印。有了缓冲机制，操作系统就可以
将程序的多个输出操作组合成单一的系统级写操作。由于设备的写操作可能很耗时，允许操作系统将多个输出操作组
合为单一的设备写操作可以带来很大的性能提升。
	导致缓冲刷新（即，数据真正写到输出设备或文件）的原因有很多:
	>>>>程序正常结束，作为main函数的return操作的一部分，缓冲刷新被执行。
	>>>>缓冲区满时，需要刷新缓冲，而后新的数据才能继续写入缓冲区。
	>>>>我们可以使用操作符如endl来显示刷新缓冲区
	>>>>在每个输出操作之后，我们可以用操作符unitbuf设置流的内部状态，来清空缓冲区。默认情况下，对
cerr是设置unitbuf的，因此写到cerr的内容都是立即刷新的。
	>>>>一个输出流可能被关联到另一个流。在这种情况下。当读写被关联的流时，关联到的流的缓冲区会被刷新。
例如，默认情况下，cin和cerr都关联到cout。因此，读cin或写cerr都会导致一个cout的缓冲区被刷新。
注意:
	这里本人测试了一下，关于这个缓冲区的输出的测试
		#include <iostream>
		using namespace std;
		int main(void)
		{
			cout<<"hello world";
			while(1);
			return 0;
		}
这个程序是输出不了hello world的，因为不满足上述所有的缓冲区被刷新的条件。

刷新输出缓冲区

	我们已经使用过操纵符endl，他完成换行并刷新缓冲区的工作。IO库中还有两个类似的操作符:flush和ends。
flush刷新缓冲区，但不输出任何额外的字符；ends向缓冲区插入一个空字符，然后刷新缓冲区:
		cout<<"hi !"<<endl;		//输出hi和一个换行
		cout<<"hi !"<<flush;	//输出hi,然后刷新缓冲区，不附加任何额外字符
		cout<<"hi !"<<ends;		//输出hi和一个空字符，然后刷新缓冲区。

unitbuf缓冲区

	如果想在每次输出操作后都刷新缓冲区，我们可以使用unibuf操纵符。它告诉流在接下来的每次写操作之后都
进行一次flush操作。而nounitbuf操纵符则重置流，使其恢复使用正常的系统管理的缓冲区刷新机制:
		cout<<unitbuf;		//所有输出操作后都会主动立即刷新缓冲区
		cout<<nounitbuf;	//回到正常的缓冲方式
警告:如果程序崩溃，输出缓冲区不会刷新
	如果程序异常终止，输出缓冲区是不会被刷新的。当一个程序崩溃后，它所输出的数据很可能停留在输出缓冲
区等待打印。当调试一个已经崩溃的程序时，需要确认那些你人为已经输出的数据确实已经刷新了。否则，可能将
大量的时间浪费在追踪代码为什么没有执行上，而实际上代码已经执行了。只是程序崩溃后缓冲区没有被刷新，
输出数据被挂起没有打印而已。

关联输入和输出流

	当一个输入流被关联到一个输出流时，任何试图从输入流读取数据的操作都会先刷新关联的输出流。标准库将
cout和cin关联在一起，因此下面的语句
		cout>>ival;
导致cout的缓冲区被刷新。
注意
	交互式系统通常应该关联输入流和输出流。这意味着所有输出，包括用户提示信息，都会在读操作之前被打印
出来。

8.2	文件输入输出

	头文件fstream定义了三个类型来支持文件IO:ifstream从一个给定文件读取数据；ofstream向一个给
定文件写入数据。以及fstream可以读写给定文件。这些类型提供的操作与我们之前已经使用过的对象cin和cout
的操作一样。特别是我们可以使用IO运算符(<<和>>)来读写文件，可以使用getline从一个ifstream读取数据。
	除了继承自iostream类型的行为之外，fstream中定义的类型还增加了一些新的成员来管理与流相关的文
件。下表中列出了这些操作:

		fstream	fstrm;		创建一个未绑定的文件流。fstream是头文件fstream中定义
							的一个类型
		fstream	fstrm(s);	创建一个fstream，并打开名为s的文件。s可以是string类型，或
							者是一个指向C风格字符串的指针
这些构造函数都是explicit的。默
							认的文件模式mode依赖于fstream的类型
		fstream fstrm(s,mode);	与前一个构造函数类似，但按指定mode打开文件
		fstrm.open(s)		打开名为s的文件，并将文件与fstrm绑定。s可以是一个string或
							一个指向C风格字符串的指针。默的文件mode依赖于fstream的类型
							返回void
		fstrm.close()		关闭与fstrm绑定的文件，返回void
		fstrm.is_open()		返回一个bool值，指出与fstrm关联的文件是否成功打开且尚未关闭

8.2.1	使用文件流对象

	当我们想要读写一个文件时，可以定义一个文件流对象，并将对象与文件关联起来。每个文件流类都定义了一个
名为open的成员函数，它完成一些系统相关的操作，来定位给定的文件，并视情况打开为读或写模式。创建文件流对
象时，我们可以提供文件名（可选的）。如果提供了一个文件名，则open会自动被调用:
		ifstream in(ifile);		//构造一个ifstream并打开给定文件
		ofstream out;			//输出文件流未关联到任何文件
这段代码定义了一个输入流in，它被初始化为从文件读取数据，文件名由string类型的参数ifile指定。第二条语句
定义了一个输出流out,未与任何文件关联。在新C++标准中，文件名既可以是库类型string对象，也可以是C风格字符
数组。旧版本的标准库只允许C风格字符数组。

用fstream代替iostream&

	我们在8.1节已经提到过，在要求使用基类型对象的地方，我们可以用继承类型的对象代替。这意味着，接受一个
iostream类型引用（或指针）参数的函数，可以用一个对应的fstream(或sstream)类型来调用。也就是说，如果
有一个函数接受一个ostream&参数，我们在调用这个函数的时候，可以传递给它一个ofstream对象，对istream&
和ifstream也是类似的。
	例如，我们可以用7.1.3节中的read和print函数来读写命名未见。在本例中，我们假定输入和输出文件的名
字是通过传递给main函数的参数来指定的:
		ifstream input(argv[1]);		//打开销售记录文件
		ofstream output(argv[2]);		//打开输出文件
		Sales_data total;				//保存销售总额的变量
		if(read(input,total))//读取第一条销售记录
		{
			Sales_data trans;	//保存下一条销售记录的变量
			while(read(input,trans))
			{
				if(total.isbn() == trans.isbn())
					total.combine(trans);
				else
				{
					print(output,total)<<enl;
					total = trans;
				}
			}
			print(output,total)<<endl;
		}
		else
			cerr<<"No data?"<<endl;
除了读写的是命名文件外，这段程序与之前的加法程序几乎是完全相同的。重要的部分是对read和print的调用。
虽然两个函数定义时指定的形参分别是istream&和ostream&，但我们可以向他们传递fstream对象。

成员函数open和close

	如果我们定义了一个空文件流对象，可以随后调用open来将它与文件关联起来：
		iftream in(file);		//构筑一个iftream并打开给定文件
		ofstream out;			//输出文件流未与任何文件相关联
		out.open(ifile+".copy");//打开指定文件。
	如果调用open失败，failbit会被置位。因为调用open可能失败，进行open是否成功的检测通常是一个好习惯:
		if(out)			//检查open是否成功
						//open成功，我们就可以使用文件了
这个条件判断与我们之前将cin用作条件相似。如果open失败，条件会为假，我们就不会去使用out了。
	一旦一个文件流已经打开，它就保持与对应文件的关联。实际上，对一个已经打开的文件流调用open会失效，并
会导致failbit被置位。随后的试图使用文件流的操作都会失败。为了将文件流关联到另外一个文件，必须首先关闭
已经关联的文件。一旦文件成功关闭，我们可以打开新的文件:
		in.close();			//关闭文件
		in.open(ifile+"2");	//打开另一个文件
如果open成功，则open会设置流的状态，使得good()为true。

自动构造和析构

	考虑这样一个程序，它的main函数接受一个要处理的文件列表。这种成程序可能会有如下的循环:
		//对每个传递给程序的文件执行循环操作
		for(auto p = argv + 1;p != argv +argc;++p)
		{
			ifstream input(*p);	//创建输出流并打开文件
			if(input)
				process(input);
			else
				cerr<<"couldn't open:"+string(*p);
		}//每个循环步input都会离开作用域，因此会被销毁。
每个循环步构造一个新的名字为input的ifstream对象，并打开它来读取给定的文件。像之前一样，我们检查open
是否成功。如果成功，将文件传递给一个函数，该函数负责读取并处理输入数据。如果open失败，打印一条错误信息
并继续处理下一个文件。
	因为input是while循环的局部变量，它在每个循环步中都要创建和销毁一次。当一个fstream对象离开其作用
域时，与之关联的文件会自动关闭，在下一步循环中，input会再次被从创建。之所以能连续处理，是因为for循环到每
次的结尾就是到达了作用域结束的地方，然后所有的变量都会自动被注销。所以ifstream流才会被关闭掉。
注意:
	当一个fstream对象被销毁时，close会自动被调用

8.2.2	文件模式

	每个流都有一个关联的文件模式(file mode)，用来指出如何使用文件。

		in					以读方式打开文件
		out					以写方式打开文件
		app					每次写操作前均定位到文件末尾
		ate					打开文件后立即定位到文件末尾
		trunc				截断文件
		binary				以二进制方式进行IO
无论用哪种方式打开文件，我们都可以指定文件模式，调用open打开文件时可以，用一个文件名初始化流来隐式打开
文件时也可以。指定文件模式有如下限制:
		>>>>只可以对ofstream或fstream对象设置out模式
		>>>>只可以对ifsream或fstream对象设定in模式
		>>>>只有当out被设定时才才可以设定trunc模式
		>>>>只要ttruncc没被设定，就可以设定app模式。在app模式下，即使没有显示指定out模式，文件
也总是以输出方式被打开。
		>>>>默认情况下，即使我们没有指定trunc，以out模式打开的文件也会被截断（也就是默认的模式是
trunc模式）。为了保留out模式打开的文件内容，我们必须同时指定app模式，这样只会将数据追加写到文件
末尾；或者同时指定in模式，即打开文件同时进行读写操作。
		>>>>ate和binary模式可用于任何类型的文件流对象，且可以与其他任何文件模式组合使用。
每个文件流类型都定义了一个默认的文件模式，当我们未指定文件模式时，就使用此默认格式。与ifstream关联
的文件默认以in模式打开；与ofstream关联的文件默认以out模式打开；与fstream关联的文件默认以in和out
模式打开。

以out模式打开文件会丢弃已有数据

	默认情况下，当我们打开一个ofstream时，文件的内容会被丢弃。阻止一个ofstream清空给定文件的内容的
方法是同时指定app模式:
		//在这几条语句中，file1都被截断
		ofstream out("file1");		//隐含以输出模式打开文件并截断文件
		ofstream out2("file1",ofstream::out);//隐含地截断文件
		ofstream out3("file1",ofstream::out | ofstream::trunc);
		//为了保留文件内容，我们必须显示指定app模式
		ofstream app("file2",ofstream::app);//隐含为输出模式
		ofstream app2("file2",ofstream::app | oftream::out);
保留ofstream打开的文件中已有的数据的唯一方法是显示指定app或in模式。

每次调用open时都会确定文件模式

	对于一个给定流，每当打开文件时，都可以改变其文件模式。
		ofstream out;	//未指定文件打开模式
		out.open("scratchpad");	//模式隐式设置为输出和截断
		out.close();//关闭out,以使我们使用其它文件
		out.open("precious",ofstream::app);//模式为输出和追加
		out.close();

8.3		string流

	sstream头文件定义了三个类型来支持内存IO。这些类型可以向string写入数据，从string读取数据。
就像string是一个IO流一样。istringstream从string读取数据，ostringstream向string写入数据。
而头文件stringstream既可以从string读取数据也可以向string写数据。与fstream类型类似。头文件
sstream中定义的类型都继承自我们已经使用过的iostream头文件中定义的类型。除了继承得来的操作，
sstream中定义的类型还增加了一些成员来管理与流有关联的string。下表列出了这些操作，可以对
stringstream对象调用这些操作，但不能对其他IO类型调用这些操作:

		sstream strm;			strm是一个未绑定的stringstream对象。sstream是
								头文件sstream中定义的一个类型
		sstream strm(s);		strm是一个sstream对象，保存string s的一个拷贝。此
								构造函数是explicit的
		strm.str()				返回strm所保存的string的拷贝
		strm.str(s)				将string　s拷贝到strm中。返回void

8.3.1	使用istringstream

	当我们的某些工作是对整行文本进行处理，而其他一些工作是处理行内的单个单词时，通常可以使用istringstream。
考虑这样一个例子，假定有一个文件，列出了一些人和他们的电话号码。某些人只有一个号码，而另外一些人则多有个
－－－－家庭电话、工作电话、移动电话等。我们的输入文件看起来可能是这样的:
		morgan 20034324 545345234
		drew 432342353
		lee 60423423 3124324 4534534
文件中每条记录都以一个人名开始，后面跟随一个或多个电话号码。我们首先定义一个简单的类来描述输入数据:
		//成员默认为公有:
		struct PersonInfo{
			string name;
			vector<string> phones;
		};
类型PersonInfo的对象会有一个成员来表示人名，还有一个vector来保存此人的所有电话号码。我们的程序会读取
文件，并创建一个PersonInfo的vector。vector中每个元素对文件中的每一条记录。我们在一个循环中处理输入
数据，每个循环步读取一条记录，提取出一个人名和若干电话号码:
		string line,word;
		vector<PersonInfo> people;
		while(getline(cin,line)){
			PersonInfo info;
			istringstream record(line);
			record>>info.name;//读取名字，这个读取名字是靠着空格来分辨的。每一个空格前后都是一个
string对象！！
			while(record >> word)
				info.phones.push_back(word);
			people.push_back(info);
		}
这里我们使用getline从标准输入读取整条记录。如果getline调用成功，那么line中保存着从输入文件而来的一条
记录。在while中，我们定义了一个局部PersonInfo对象，来保存当前记录中的数据。
	接下来我们将一个istringstream与刚刚读取的文本行进行绑定，这样就可以在此istringstream上使用输入运
算符来读取当前记录中的每个元素。我们首先读取人名，随后用一个while循环读取此人的电话号码。当读取完line
中所有数据后，内层while循环就结束了。此循环的工作方式与前面章节中读取cin的循环很相似，不同之处是，此循环从
一个string而不是标准输入读取数据。当string中的数据全部读出后，同样会触发“文件结束”信号，在record上的下一
个输入操作会失败。我们将刚刚处理好的PersonInfo追加到vector中，外层while循环的一个循环步就随之结束了。
外层while循环会持续执行，直至遇到cin的文件结束标志。

8.3.2	使用ostringstream

	当我们逐步构造输出，希望最后一起打印时，ostringstream是很有用的。例如，对上一节的例子，我们可能想
逐个验证电话号码并改变其格式。如果所有号码都是有效的，我们希望输出一个新的文件，包含改变格式后的号码。对
于那些无效的号码，我们不会将它输出到文件中，而是打印一条包含人名和无效号码的错误信息。由于我们不希望输出
无效号码的人，因此对每个人，知道验证完所有电话号码后才可以进行输出操作。但是我们可以先将输出内容“写入”到
另一个内存ostringstream中:
		for(const auto &entry : people){
			ostringstream formatted,badNums;
			for(const auto &nums : entry.phones){
				if(!valid(nums)){
					badNums << " " <<nums;
				}
				else
					formatted<<" " <<format(nums);
			}
			if(badNums.str().empty(())
				os<<entry.name<<" " <<formatted.str()<<endl;
			else
				cerr<<"input error:"<<entry.name<<"invalid numberrs(s)"<<badNums.str()<<endl;
		}
在此程序中，我们假定已有两个函数，valid和format，分别完成电话号码验证和改变格式的功能。程序最有趣的
部分是对字符串流formatted和badNums的使用。我们使用标准的输出运算符(<<)向这些对象写入数据，但这些
“写入”操作实际上转换为string操作，分别向formatted和badNums中的string对象添加字符。
其实就是通过：将所有的string对象的内容都存放到了ostringstream中去了，最后再通过读取
相应的流的内容输出数据！
		
